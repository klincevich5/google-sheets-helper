import time
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
from config import SCAN_INTERVAL_SECONDS, WARSAW_TZ, ROTATIONS_LOG_FILE
from auth import load_credentials
from database import get_pending_scans, get_doc_id_map
from logger import log_to_file
from handlers import handle_fetched_data, perform_group_import, handle_main_rotations_group
from utils import filter_valid_tasks, get_group_ranges, fetch_data_from_sheet

from clean import clear_db

log_file = ROTATIONS_LOG_FILE
table_name = "RotationsInfo"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

def RotationsInfo_scanner():
    log_to_file(log_file, "=" * 60)
    log_to_file(log_file, "üü¢ RotationsInfo_scanner –∑–∞–ø—É—â–µ–Ω.")
    log_to_file(log_file, "=" * 60)

    while True:
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        log_to_file(log_file, "" * 60)
        log_to_file(log_file, "C–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
        log_to_file(log_file, "" * 60)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å doc_id –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, VIP, QA –∏ —Ç.–¥.)
        doc_id_map = get_doc_id_map()
        if not doc_id_map:
            log_to_file(log_file, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        log_to_file(log_file, f"üü¢ –ü–æ–ª—É—á–µ–Ω—ã doc_id –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(doc_id_map)}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        tasks = get_pending_scans(table_name)
        if not tasks:
            log_to_file(log_file, f"‚è≥ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ {datetime.now(WARSAW_TZ).strftime('%H:%M:%S')}")
            time.sleep(SCAN_INTERVAL_SECONDS)
            continue
        log_to_file(log_file, f"üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö doc_id (—Ç–æ –µ—Å—Ç—å –æ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
        tasks_for_scan = filter_valid_tasks(tasks, doc_id_map, log_file)
        if not tasks_for_scan:
            log_to_file(log_file, "‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            time.sleep(SCAN_INTERVAL_SECONDS)
            continue
        log_to_file(log_file, f"üü¢ –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(tasks_for_scan)}")

        now = datetime.now()
        hour = now.hour
        tab_list = []

        # Determine which tabs to process based on time
        if 9 <= hour < 19:
            day_tab = f"DAY {now.day}"
            night_tab = "missing"
            tab_list.append(day_tab)

        elif 19 <= hour < 21:
            day_tab = f"DAY {now.day}"
            night_tab = f"NIGHT {now.day}"
            tab_list.append(day_tab)
            tab_list.append(night_tab)

        elif 21 <= hour <= 23:
            day_tab = "missing"
            night_tab = f"NIGHT {now.day}"
            tab_list.append(night_tab)

        elif 0 <= hour < 7:
            yesterday = now - timedelta(days=1)
            day_tab = "missing"
            night_tab = f"NIGHT {yesterday.day}"
            tab_list.append(night_tab)

        elif 7 <= hour < 9:
            yesterday = now - timedelta(days=1)
            day_tab = f"DAY {now.day}"
            night_tab = f"NIGHT {yesterday.day}"
            tab_list.append(day_tab)
            tab_list.append(night_tab)
        log_to_file(log_file, f"üìÑ day_tab: {day_tab}, night_tab: {night_tab}")
        log_to_file(log_file, f"üìÇ –¢–∞–±–ª–∏—Ü—ã –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ: {tab_list}")
        tasks_for_scan = [task for task in tasks_for_scan if task.get("source_page_name") in tab_list]

        if not tasks_for_scan:
            log_to_file(log_file, f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º: {tab_list}")
            time.sleep(SCAN_INTERVAL_SECONDS)
            continue

        log_to_file(log_file, f"üü¢ –ó–∞–¥–∞—á —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏: {len(tasks_for_scan)}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –≠–¢–ê–ü 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        sheet = load_credentials()
        if sheet is None:
            log_to_file(log_file, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            time.sleep(SCAN_INTERVAL_SECONDS)
            continue
        log_to_file(log_file, "üü¢ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—é scan_group
        scan_groups = set(t["scan_group"] for t in tasks_for_scan if t.get("scan_group"))
        if not scan_groups:
            log_to_file(log_file, "‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            time.sleep(SCAN_INTERVAL_SECONDS)
            continue
        log_to_file(log_file, "#" * 30)
        log_to_file(log_file, f"üü¢ –ì—Ä—É–ø–ø—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(scan_groups)}")
        
        # –≠—Ç–∏ —Å–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ö–æ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
        changed_update_groups = []  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∏–º–ø–æ—Ä—Ç
        scanned_tasks = []          # –°—é–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –≠–¢–ê–ü–´ 3, 4, 5: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º (–≥—Ä—É–ø–ø—ã —Å–≤—è–∑–∞–Ω—ã —Å –æ–¥–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º)
        for group in scan_groups:
            log_to_file(log_file, "==========================\n")
            log_to_file(log_file, f"üü¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group}\n")

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
            group_tasks = [t for t in tasks_for_scan if t["scan_group"] == group]
            for task in group_tasks:
                log_to_file(log_file, f"  ID={task['id']} | {task['process_data_method']}| {task['source_doc_id']}| {task['source_page_name']} | {task['source_page_area']}")

            # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ (–≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø–µ ‚Äî –∏–∑ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
            doc_id = group_tasks[0]["source_doc_id"]

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (range) –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            range_map = get_group_ranges(group_tasks, log_file)
            log_to_file(log_file, f"üü¢ –ü–æ–ª—É—á–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {len(range_map)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch-–∑–∞–ø—Ä–æ—Å –≤ Google Sheets, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
            fetched = fetch_data_from_sheet(sheet, doc_id, list(range_map.keys()), log_file)
            log_to_file(log_file, f"üü¢ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {len(fetched)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
            for i, r in enumerate(fetched):
                log_to_file(log_file, f"  {i+1} | {r['range']} | {r['values']}")    
            if fetched is None:
                log_to_file(log_file, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –¥–ª—è –≥—Ä—É–ø–ø—ã {group}.")
                continue  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à–∏, –æ—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏)
            handle_fetched_data(fetched, range_map, changed_update_groups, table_name, log_file)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            scanned_tasks.extend(group_tasks)

        for task in scanned_tasks:
            log_to_file(log_file, f"  ID={task['id']} | {task['process_data_method']}| {task['source_doc_id']}| {task['source_page_name']} | {task['source_page_area']}")
        # üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã update_main ‚Äî –ü–ï–†–í–û–ô
        main_update_tasks = [t for t in scanned_tasks if t.get("update_group") == "update_main"]
        if main_update_tasks:
            log_to_file(table_name, f"üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã update_main ({len(main_update_tasks)} –∑–∞–¥–∞—á)")
            handle_main_rotations_group(sheet, main_update_tasks, table_name, log_file)

        # # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É update_main –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        # tasks_for_scan = [t for t in tasks_for_scan if t.get("update_group") != "update_main"]

        # # üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø update_*
        # remaining_update_groups = [g for g in set(changed_update_groups) if g != "update_main"]

        # for group in remaining_update_groups:
        #     group_tasks = [t for t in scanned_tasks if t.get("update_group") == group]
        #     log_to_file(log_file, f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {group} ({len(group_tasks)} –∑–∞–¥–∞—á)")
        #     perform_group_import(sheet, group_tasks, table_name, log_file)

        # –ü–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–º–ø–æ—Ä—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    clear_db(table_name)
    RotationsInfo_scanner()
    log_to_file(log_file, "üî¥ RotationsInfo_scanner –∑–∞–≤–µ—Ä—à–µ–Ω.")

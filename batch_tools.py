# batch_tools.py 

from typing import List, Dict, Set
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from logger import log_to_file
from database import list_tracked_documents
from datetime import datetime
from config import WARSAW_TZ
import os


# –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É OAuth2-—Ç–æ–∫–µ–Ω—É
TOKEN_PATH = "token.json"

def fetch_batch_values(spreadsheet_id: str, ranges: List[str]) -> Dict[str, List[List[str]]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç batchGet-–∑–∞–ø—Ä–æ—Å –∫ Google Sheets API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç values_map:
    {page_name: [[row1], [row2], ...]}

    –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ 'DAY 1!D:D', —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è:
        {'DAY 1': [[...], [...], ...]}
    """
    if not os.path.exists(TOKEN_PATH):
        raise Exception("‚ùå Token.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

    creds = Credentials.from_authorized_user_file(TOKEN_PATH)
    service = build("sheets", "v4", credentials=creds)
    sheet = service.spreadsheets()

    try:
        result = sheet.values().batchGet(
            spreadsheetId=spreadsheet_id,
            ranges=ranges,
            majorDimension="ROWS"
        ).execute()

        value_ranges = result.get("valueRanges", [])
        values_map = {}

        for entry in value_ranges:
            range_str = entry.get("range", "")  # –ù–∞–ø—Ä–∏–º–µ—Ä: 'DAY 1!D:D'
            values = entry.get("values", [])
            if "!" in range_str:
                page = range_str.split("!")[0]
                values_map[page] = values

        return values_map

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ batchGet: {e}")
        return {}

def build_batchget_ranges(processes: List[dict], log_file) -> Dict[str, Set[str]]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –æ–¥–Ω–æ–π scan_group) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {spreadsheet_id: set(ranges)} ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.

    get_default ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è area –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä A1:B300)
    –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É D (–Ω–∞–ø—Ä–∏–º–µ—Ä D:D)
    """
    now_str = datetime.now(WARSAW_TZ).strftime("[%Y-%m-%d %H:%M:%S]")

    # 1. –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É table_type ‚Üí spreadsheet_id
    type_to_doc_id = {}
    for table_type, _, doc_id in list_tracked_documents():
        type_to_doc_id[table_type] = doc_id

    doc_to_ranges: Dict[str, Set[str]] = {}

    for row in processes:
        doc_id = row.get("spreadsheet_id")
        if not doc_id:
            doc_id = type_to_doc_id.get(row.get("source_table_type"))

        page = row.get("source_page_name")
        method = row.get("get_data_method")
        area = row.get("source_page_area")

        if not doc_id or not page:
            if log_file:
                log_to_file(log_file, f"{now_str} ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –±–µ–∑ doc_id –∏–ª–∏ page: ID={row.get('id')}")
            continue

        if method == "get_default":
            range_str = f"{page}!{area}"
        else:
            range_str = f"{page}!D:D"

        if log_file:
            log_to_file(
                log_file,
                f"{now_str} üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω ‚Üí ID={row.get('id')} | üÜî {doc_id} | üìë {page} | ‚öô {method} | üî≤ {range_str}"
            )

        doc_to_ranges.setdefault(doc_id, set()).add(range_str)

    return doc_to_ranges
import time
from typing import List
from logger import log_info, log_error
from notifier import send_telegram_message
from google_service import GoogleSheetsService


class BaseScanner:
    def __init__(self, log_path: str, sleep_seconds: int) -> None:
        self.log_path: str = log_path
        self.sleep_seconds: int = sleep_seconds
        self.service = GoogleSheetsService(self.log_path).service
        self.tasks: List = []

    def scan_phase(self) -> None:
        """–§–∞–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–º–∫–∞—Ö."""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ scan_phase –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ.")

    def process_phase(self) -> None:
        """–§–∞–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á."""
        if not self.tasks:
            log_info(self.log_path, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        for task in self.tasks:
            try:
                task.process_raw_value()
                task.check_for_update()
            except Exception as e:
                log_error(self.log_path, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {getattr(task, 'name_of_process', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞')}: {e}")

    def update_phase(self) -> None:
        """–§–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        if not self.tasks:
            log_info(self.log_path, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        tasks_to_update = [task for task in self.tasks if getattr(task, 'need_update', 0) == 1]

        if not tasks_to_update:
            log_info(self.log_path, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        for task in tasks_to_update:
            try:
                self.update_task(task)
            except Exception as e:
                log_error(self.log_path, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {getattr(task, 'name_of_process', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞')}: {e}")
                send_telegram_message(self.log_path, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {getattr(task, 'name_of_process', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞')}: {e}")

    def update_task(self, task) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –ø–æ—Ç–æ–º–∫–∞—Ö."""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ update_task –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ.")

    def start(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª."""
        log_info(self.log_path, "üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        while True:
            try:
                self.scan_phase()
                self.process_phase()
                self.update_phase()
            except KeyboardInterrupt:
                log_info(self.log_path, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ Ctrl+C.")
                break
            except Exception as e:
                log_error(self.log_path, f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                send_telegram_message(self.log_path, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")
            time.sleep(self.sleep_seconds)

import json
import webbrowser
import threading
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
from google_auth_oauthlib.flow import Flow
from datetime import datetime

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/cloud-platform.read-only",
    "https://www.googleapis.com/auth/monitoring.read",
    "https://www.googleapis.com/auth/logging.read",
    "https://www.googleapis.com/auth/drive.metadata.readonly"  # ‚Üê –¥–æ–±–∞–≤–∏—Ç—å
]

REDIRECT_PORT = 8888
REDIRECT_URI = f"http://localhost:{REDIRECT_PORT}/"

# –°–ø–∏—Å–æ–∫ (—Ñ–∞–π–ª_—Å–µ–∫—Ä–µ—Ç–∞, —Ñ–∞–π–ª_—Ç–æ–∫–µ–Ω–∞)
CLIENTS = [
    ("client_secret_RotationsInfo_scanner_2.json", "RotationsInfo_scanner_2_token.json"),
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±—É–¥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ —Ü–∏–∫–ª–µ)
flow = None
current_token_filename = None


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OAuth redirect =====
class OAuthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        query = urlparse(self.path).query
        params = parse_qs(query)

        if 'code' in params:
            code = params['code'][0]

            self.send_response(200)
            self.send_header("Content-Type", "text/html; charset=utf-8")
            self.end_headers()
            html = "<h1>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú–æ–∂–µ—à—å –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</h1>"
            self.wfile.write(html.encode("utf-8"))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            flow.fetch_token(code=code)
            creds = flow.credentials
            token_data = {
                "access_token": creds.token,
                "refresh_token": creds.refresh_token,
                "token_uri": creds.token_uri,
                "client_id": creds.client_id,
                "client_secret": creds.client_secret,
                "scopes": creds.scopes,
                "expiry": creds.expiry.isoformat() if creds.expiry else None
            }

            with open(current_token_filename, "w", encoding="utf-8") as f:
                json.dump(token_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {current_token_filename}\n")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            def shutdown():
                self.server.shutdown()
            threading.Thread(target=shutdown).start()


# ===== –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª =====
for client_secret_file, token_filename in CLIENTS:
    print(f"üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {token_filename}")

    flow = Flow.from_client_secrets_file(
        client_secret_file,
        scopes=SCOPES,
        redirect_uri=REDIRECT_URI
    )

    auth_url, _ = flow.authorization_url(prompt='consent')
    webbrowser.open(auth_url)
    print(f"üîó –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n{auth_url}\n")

    current_token_filename = token_filename

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –∂–¥—ë–º –æ—Ç–≤–µ—Ç
    server = HTTPServer(('localhost', REDIRECT_PORT), OAuthHandler)
    print(f"‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ http://localhost:{REDIRECT_PORT}/ ...")
    server.serve_forever()

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è
    time.sleep(1)

print("üéâ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")

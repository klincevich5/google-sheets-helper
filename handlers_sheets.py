import time
from datetime import datetime
import traceback
import json

from config import WARSAW_TZ, SHEETS_LOG_FILE
from database import update_sheet_task_data, update_sheet_import_data
from logger import log_to_file
from utils import process_data_by_method


def handle_fetched_data(value_ranges, range_to_tasks, changed_update_groups):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç batchGet.
    –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Ö—ç—à, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.
    """
    for requested_range, value_range in zip(range_to_tasks.keys(), value_ranges):
        values = value_range.get("values", [])

        for task in range_to_tasks[requested_range]:
            try:
                log_to_file(SHEETS_LOG_FILE, f"üü¢ ID={task['id']} | –ó–∞–ø—Ä–æ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {requested_range}")

                now_str = datetime.now(WARSAW_TZ).isoformat()
                task["last_scan"] = now_str
                task["scan_quantity"] = task.get("scan_quantity", 0) + 1

                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if not values:
                    task["scan_failures"] = task.get("scan_failures", 0) + 1
                    log_to_file(SHEETS_LOG_FILE, f"  ‚ùå ID={task['id']} | –ü—É—Å—Ç–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω {requested_range}")
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à
                    process_data_method = task.get("process_data_method")

                    values_json, new_hash = process_data_by_method(process_data_method, values)

                    if new_hash != task.get("hash"):
                        log_to_file(SHEETS_LOG_FILE, f"  üîÅ ID={task['id']} | –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã")
                        task["hash"] = new_hash
                        task["values_json"] = values_json
                        if task.get("update_group"):
                            changed_update_groups.append(task["update_group"])

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                for key in ["last_scan", "scan_quantity", "scan_failures", "hash", "values_json"]:
                    log_to_file(SHEETS_LOG_FILE, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏:")
                    log_to_file(SHEETS_LOG_FILE, f"  üîÅ {key}={task[key]}")
                    task[key] = task.get(key, None)
                update_sheet_task_data(task)

            except Exception as e:
                log_to_file(SHEETS_LOG_FILE, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task['id']}: {str(e)}\n{traceback.format_exc(limit=1)}")


def perform_group_import(sheet, group_tasks):
    """
    –ü–æ—à–∞–≥–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ batchUpdate.
    –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.
    –ú–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤, –ø–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏.
    """
    from time import time as now_unix
    start = now_unix()
    max_time = 60  # —Å–µ–∫—É–Ω–¥
    delay = 1      # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    tasks_remaining = list(group_tasks)  # –∫–æ–ø–∏—è –∑–∞–¥–∞—á
    imported = set()

    while tasks_remaining and now_unix() - start < max_time:
        log_to_file(SHEETS_LOG_FILE, "===========================")
        log_to_file(SHEETS_LOG_FILE, f"üü¢ –ò–º–ø–æ—Ä—Ç –≥—Ä—É–ø–ø—ã {tasks_remaining[0]['update_group']}...")
        log_to_file(SHEETS_LOG_FILE, f"üü¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {len(tasks_remaining)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞
        for task in tasks_remaining:
            log_to_file(SHEETS_LOG_FILE, f"üîÅ source_page_area={task['source_page_area']}")
            log_to_file(SHEETS_LOG_FILE, f"üîÅ process_data_method={task['process_data_method']}")
            log_to_file(SHEETS_LOG_FILE, f"–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏{len(task['values_json'][0])} —Å—Ç–æ–ª–±—Ü–æ–≤, {len(task['values_json'])} —Å—Ç—Ä–æ–∫")
            log_to_file(SHEETS_LOG_FILE, f" üîÅ target_page_area={task['target_page_area']}")
            log_to_file(SHEETS_LOG_FILE, "============================")
            log_to_file(SHEETS_LOG_FILE, f"  üü¢ ID={task['id']} | –ò–º–ø–æ—Ä—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {task['target_page_name']}!{task['target_page_area']}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è batchUpdate
        data_to_import = []
        for task in tasks_remaining:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ ‚Äî —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            try:
                values = json.loads(task.get("values_json") or "[]")
                data_to_import.append({
                    "range": f"'{task['target_page_name']}'!{task['target_page_area']}",
                    "values": values
                })
            except json.JSONDecodeError as e:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–≤–∞–Ω–∏–∏ JSON-—Å—Ç—Ä–æ–∫–∏
                task["update_failures"] = task.get("update_failures", 0) + 1
                update_sheet_import_data(task)
                log_to_file(SHEETS_LOG_FILE, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ –∑–∞–¥–∞—á–µ ID={task['id']}: {str(e)}")
                tasks_remaining.remove(task)
            except Exception as e:
                # –î—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —è–≤–Ω–æ
                task["update_failures"] = task.get("update_failures", 0) + 1
                update_sheet_import_data(task)
                log_to_file(SHEETS_LOG_FILE, f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ID={task['id']}: {str(e)}\n{traceback.format_exc(limit=1)}")
                tasks_remaining.remove(task)
        if not data_to_import:
            log_to_file(SHEETS_LOG_FILE, "‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã ‚Äî –Ω–µ—á–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.")
            break

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        try:
            sheet.values().batchUpdate(
                spreadsheetId=tasks_remaining[0]["target_doc_id"],
                body={"valueInputOption": "RAW", "data": data_to_import}
            ).execute()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é
            now_str = datetime.now(WARSAW_TZ).isoformat()
            for task in tasks_remaining:
                task["last_update"] = now_str
                task["update_quantity"] = task.get("update_quantity", 0) + 1
                update_sheet_import_data(task)
                imported.add(task["id"])
                log_to_file(SHEETS_LOG_FILE, f"‚úÖ ID={task['id']} | –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")

            break  # –≤—ã—Ö–æ–¥–∏–º ‚Äî –≤—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

        except Exception as err:
            text = str(err)
            log_to_file(SHEETS_LOG_FILE, "")
            log_to_file(SHEETS_LOG_FILE, f"‚ùå batchUpdate –æ—à–∏–±–∫–∞:\n{text}\n{traceback.format_exc(limit=1)}")
            log_to_file(SHEETS_LOG_FILE, "")

            # –ò—â–µ–º –∑–∞–¥–∞—á—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ (–ø–æ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞)
            failed = None
            for task in tasks_remaining:
                if task["target_page_name"] in text:
                    failed = task
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
            failed = failed or tasks_remaining[0]

            # –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ –ë–î –∏ –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É
            failed["update_failures"] = failed.get("update_failures", 0) + 1
            log_to_file(SHEETS_LOG_FILE, f"‚ö†Ô∏è ID={failed['id']} | –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {text}")
            update_sheet_import_data(failed)
            log_to_file(SHEETS_LOG_FILE, f"  ‚ùå ID={failed['id']} | –ò—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
            tasks_remaining.remove(failed)

            time.sleep(delay)

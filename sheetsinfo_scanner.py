import time
from googleapiclient.errors import HttpError
from data import load_sheetsinfo_tasks
from logger import log_to_file

from config import SHEETSINFO_LOG

class SheetsInfoScanner:
    def __init__(self, conn, service, doc_id_map):
        self.conn = conn
        self.service = service
        self.doc_id_map = doc_id_map
        self.tasks = []
        self.log_file = SHEETSINFO_LOG

    def run(self):
        while True:
            self.load_tasks()
            self.scan_phase()
            self.process_phase()
            self.update_phase()
            time.sleep(60)

    def load_tasks(self):
        self.tasks = load_sheetsinfo_tasks(self.conn)
        for task in self.tasks:
            task.assign_doc_ids(self.doc_id_map)
        log_to_file(self.log_file, f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tasks)} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ SheetsInfo.")

#==================================================================================================
#  –§–∞–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
#==================================================================================================

    def update_task_update_fields(self, task):
        """–û–±–Ω–æ–≤–∏—Ç—å last_update, update_quantity, update_failures –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏."""
        cursor = self.conn.cursor()

        cursor.execute(f"""
            UPDATE {task.source_table}
            SET
                last_update = ?,
                update_quantity = ?,
                update_failures = ?,
                need_update = ?
            WHERE id = ?
        """, (
            task.last_update.isoformat() if task.last_update else None,
            task.update_quantity,
            task.update_failures,
            task.need_update,
            task.id
        ))

        self.conn.commit()

    def batch_get(self, service, spreadsheet_id, ranges, log_file, retries=3, delay_seconds=10):
        attempt = 0
        while attempt < retries:
            try:
                result = service.spreadsheets().values().batchGet(
                    spreadsheetId=spreadsheet_id,
                    ranges=ranges,
                    majorDimension="ROWS"
                ).execute()

                value_ranges = result.get("valueRanges", [])
                data = {}
                for value_range in value_ranges:
                    range_name = value_range.get("range", "")
                    values = value_range.get("values", [])
                    data[range_name] = values

                return data

            except HttpError as e:
                status_code = e.resp.status
                log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ HTTP {status_code} –ø—Ä–∏ batchGet: {e}")

                if status_code in (429, 500, 503):
                    attempt += 1
                    log_to_file(log_file, f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ batchGet {attempt}/{retries} —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay_seconds)
                elif status_code == 401:
                    log_to_file(log_file, "üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) –ø—Ä–∏ batchGet. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
                    return {}
                else:
                    return {}

            except Exception as e:
                log_to_file(log_file, f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ batchGet: {e}")
                return {}

        return {}

    def scan_phase(self):
        if not self.tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        ready_tasks = [task for task in self.tasks if task.is_ready_to_scan()]
        if not ready_tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.")
            return

        log_to_file(self.log_file, f"üîé –ù–∞–π–¥–µ–Ω–æ {len(ready_tasks)} –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.")

        tasks_by_doc = {}
        for task in ready_tasks:
            tasks_by_doc.setdefault(task.source_doc_id, []).append(task)

        for doc_id, tasks in tasks_by_doc.items():
            try:
                ranges = [f"{task.source_page_name}!{task.source_page_area}" for task in tasks]
                log_to_file(self.log_file, f"üìÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {task.source_table_type} –¥–ª—è {len(ranges)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.")

                response_data = self.batch_get(self.service, doc_id, ranges, self.log_file)

                if not response_data:
                    log_to_file(self.log_file, f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç batchGet –¥–ª—è {task.source_table_type}.")
                    for task in tasks:
                        task.update_after_scan(success=False)
                    continue

                for task in tasks:
                    full_range = f"{task.source_page_name}!{task.source_page_area}"
                    task.raw_values_json = response_data.get(full_range)
                    if task.raw_values_json:
                        task.update_after_scan(success=True)
                    else:
                        task.update_after_scan(success=False)

            except Exception as e:
                log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {task.source_table_type}: {e}")
                for task in tasks:
                    task.update_after_scan(success=False)

#==================================================================================================
#  –§–∞–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#==================================================================================================

    def update_task_process_fields(self, task):
        cursor = self.conn.cursor()

        table_name = "SheetsInfo"

        cursor.execute(f"""
            UPDATE {table_name}
            SET
                hash = ?,
                values_json = ?,
                need_update = ?
            WHERE id = ?
        """, (
            task.hash,
            str(task.values_json) if task.values_json else None,
            task.need_update,
            task.id
        ))

        self.conn.commit()

    def process_phase(self):
        log_to_file(self.log_file, "üõ†Ô∏è –ù–∞—á–∞–ª–æ —Ñ–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (SheetsInfo)...")
        if not self.tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        for task in self.tasks:
            if not task.raw_values_json:
                log_to_file(self.log_file, f"‚ö™ [Task {task.name_of_process}] –ù–µ—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                continue

            try:
                task.process_raw_value()
                task.check_for_update()
                self.update_task_process_fields(task)
                log_to_file(self.log_file, f"‚úÖ [Task {task.name_of_process}] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î.")

            except Exception as e:
                log_to_file(self.log_file, f"‚ùå [Task {task.name_of_process}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

#==================================================================================================
#  –§–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
#==================================================================================================

    def update_phase(self):
        if not self.tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        tasks_to_update = [task for task in self.tasks if task.need_update == 1]

        if not tasks_to_update:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Google Sheets.")
            return

        log_to_file(self.log_file, f"üîÑ –ù–∞—á–∞–ª–æ —Ñ–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ó–∞–¥–∞—á –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏: {len(tasks_to_update)}.")

        tasks_by_update_group = {}
        for task in tasks_to_update:
            tasks_by_update_group.setdefault(task.update_group, []).append(task)

        for update_group, group_tasks in tasks_by_update_group.items():
            log_to_file(self.log_file, f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_group} ({len(group_tasks)} –∑–∞–¥–∞—á).")

            tasks_by_doc = {}
            for task in group_tasks:
                tasks_by_doc.setdefault(task.target_doc_id, []).append(task)

            for doc_id, tasks in tasks_by_doc.items():
                log_to_file(self.log_file, f"üìÑ –†–∞–±–æ—Ç–∞–µ–º —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º {doc_id} ({len(tasks)} –∑–∞–¥–∞—á).")
                self.update_tasks_batch(doc_id, tasks)

            time.sleep(2)

    def update_tasks_batch(self, spreadsheet_id, tasks):
        batch_data = []
        for task in tasks:
            if not task.values_json:
                log_to_file(self.log_file, f"‚ö™ [Task {task.name_of_process}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫.")
                continue

            batch_data.append({
                "range": f"{task.target_page_name}!{task.target_page_area}",
                "values": task.values_json
            })

        if not batch_data:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è batchUpdate.")
            return

        success, error = self.batch_update(self.service, spreadsheet_id, batch_data, self.log_file)

        if success:
            for task in tasks:
                task.update_after_upload(success=True)
                self.update_task_update_fields(task)
            log_to_file(self.log_file, f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ({len(tasks)} –∑–∞–¥–∞—á) –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        else:
            log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ batchUpdate –¥–ª—è –≥—Ä—É–ø–ø—ã: {error}")
            log_to_file(self.log_file, "üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—à—Ç—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á.")

            for task in tasks:
                if not task.values_json:
                    continue

                single_data = [{
                    "range": f"{task.target_page_name}!{task.target_page_area}",
                    "values": task.values_json
                }]

                single_success, single_error = self.batch_update(self.service, spreadsheet_id, single_data, self.log_file)

                if single_success:
                    task.update_after_upload(success=True)
                    log_to_file(self.log_file, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ [Task {task.name_of_process}] –æ—Ç–¥–µ–ª—å–Ω–æ.")
                else:
                    task.update_after_upload(success=False)
                    log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è [Task {task.name_of_process}] –æ—Ç–¥–µ–ª—å–Ω–æ: {single_error}")

                self.update_task_update_fields(task)

    def batch_update(self, service, spreadsheet_id, batch_data, log_file, retries=3, delay_seconds=10):
        attempt = 0
        while attempt < retries:
            try:
                body = {
                    "valueInputOption": "USER_ENTERED",
                    "data": batch_data
                }
                service.spreadsheets().values().batchUpdate(
                    spreadsheetId=spreadsheet_id,
                    body=body
                ).execute()

                return True, None

            except HttpError as e:
                status_code = e.resp.status
                log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ HTTP {status_code} –ø—Ä–∏ batchUpdate: {e}")

                if status_code in (429, 500, 503):
                    attempt += 1
                    log_to_file(log_file, f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ batchUpdate {attempt}/{retries} —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay_seconds)
                elif status_code == 401:
                    log_to_file(log_file, "üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401). –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
                    return False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"
                else:
                    return False, str(e)

            except Exception as e:
                log_to_file(log_file, f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ batchUpdate: {e}")
                return False, str(e)

        return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ batchUpdate."

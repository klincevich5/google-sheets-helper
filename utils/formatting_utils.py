# utils/formatting_utils.py

import time
import socket
# from utils.db_orm import insert_usage
from utils.logger import (
    log_info, log_success, log_warning, log_error, log_section, log_separator
)

# üé® –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
COLOR_MAP = {
    "SC": {"fg": "#000000", "bg": "#00ffff"},
    "TC": {"fg": "#000000", "bg": "#8179c7"},
    "FC": {"fg": "#000000", "bg": "#e6cd74"},
    "HOME": {"fg": "#000000", "bg": "#00ffff"},
    "FLOOR": {"fg": "#ffffff", "bg": "#11499e"},
    "LATE": {"fg": "#000000", "bg": "#ff0000"},
    "VIP": {"fg": "#000000", "bg": "#ffff00"},
    "TURKISH": {"fg": "#000000", "bg": "#f11d52"},
    "GENERIC": {"fg": "#000000", "bg": "#ff9900"},
    "GSBJ": {"fg": "#000000", "bg": "#a64d79"},
    "LEGENDZ": {"fg": "#000000", "bg": "#34a853"},
    "TRISTAR": {"fg": "#b77a30", "bg": "#434343"},
    "TRITONRL": {"fg": "#ffff00", "bg": "#073763"},
    "VIP/GEN": {"fg": "#000000", "bg": "#ff9900"},
    "LZ/GS": {"fg": "#000000", "bg": "#1609c7"},
    "GEN": {"fg": "#000000", "bg": "#ff9900"},
    "LZ": {"fg": "#000000", "bg": "#34a853"},
    "vBJ2": {"fg": "#000000", "bg": "#e6cd74"},
    "vBJ3": {"fg": "#000000", "bg": "#21cbab"},
    "gBC1": {"fg": "#000000", "bg": "#d5a6bd"},
    "vBC3": {"fg": "#000000", "bg": "#a160f3"},
    "vBC4": {"fg": "#000000", "bg": "#e06666"},
    "vHSB1": {"fg": "#000000", "bg": "#ff50e8"},
    "vDT1": {"fg": "#000000", "bg": "#e91a1a"},
    "gsRL1": {"fg": "#e5cff2", "bg": "#5a3286"},
    "swBC1": {"fg": "#ffffff", "bg": "#11734b"},
    "swRL1": {"fg": "#000000", "bg": "#ffff00"},
    "tBJ1": {"fg": "#ffffff", "bg": "#6633cc"},
    "tBJ2": {"fg": "#000000", "bg": "#3d86f8"},
    "tRL1": {"fg": "#000000", "bg": "#f11d52"},
    "gBJ1": {"fg": "#000000", "bg": "#00ffff"},
    "gBJ3": {"fg": "#000000", "bg": "#ffe599"},
    "gBJ4": {"fg": "#000000", "bg": "#a64d79"},
    "gBJ5": {"fg": "#000000", "bg": "#cc0000"},
    "gBC2": {"fg": "#000000", "bg": "#fbbc04"},
    "gBC3": {"fg": "#000000", "bg": "#3c78d8"},
    "gBC4": {"fg": "#000000", "bg": "#e69138"},
    "gBC5": {"fg": "#000000", "bg": "#ffff00"},
    "gBC6": {"fg": "#000000", "bg": "#6aa84f"},
    "gRL1": {"fg": "#000000", "bg": "#ff6d01"},
    "gRL2": {"fg": "#ffcfc9", "bg": "#b10202"},
    "gsBJ1": {"fg": "#000000", "bg": "#00ffff"},
    "gsBJ2": {"fg": "#000000", "bg": "#ff9900"},
    "gsBJ3": {"fg": "#000000", "bg": "#ffe599"},
    "gsDT1": {"fg": "#000000", "bg": "#ffe599"},
    "gsBJ4": {"fg": "#000000", "bg": "#a64d79"},
    "gsBJ5": {"fg": "#000000", "bg": "#cc0000"},
    "gRL3": {"fg": "#ffffff", "bg": "#b45f06"},
    "lBJ1": {"fg": "#000000", "bg": "#e75c74"},
    "lBJ2": {"fg": "#000000", "bg": "#54a8b2"},
    "lBJ3": {"fg": "#000000", "bg": "#ffe5a0"},
    "AB": {"fg": "#d4edbc", "bg": "#11734b"},
    "L7": {"fg": "#ffffff", "bg": "#2b9de8"},
    "DT": {"fg": "#bfe0f6", "bg": "#0a53a8"},
    "TP": {"fg": "#ffcfc9", "bg": "#b10202"},
    "DTL": {"fg": "#e5cff2", "bg": "#5a3286"},
    "TritonRL": {"fg": "#bfe0f6", "bg": "#0a53a8"},
    "Shuffle": {"fg": "#000000", "bg": "#8e7cc3"},
}

# üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HEX –≤ RGB –¥–ª—è Google Sheets API (0.0‚Äì1.0)
def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip("#")
    return {
        "red": round(int(hex_color[0:2], 16) / 255.0, 3),
        "green": round(int(hex_color[2:4], 16) / 255.0, 3),
        "blue": round(int(hex_color[4:6], 16) / 255.0, 3),
    }

# üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —è—á–µ–π–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def resolve_colors(text, color_cache):
    text = str(text).strip()
    if text in color_cache:
        return color_cache[text]

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fg, bg = hex_to_rgb("#000000"), hex_to_rgb("#ffffff")

    if "x" in text:
        fg, bg = hex_to_rgb("#000000"), hex_to_rgb("#00ff00")
    elif "SH" in text and text != "TURKISH":
        fg, bg = hex_to_rgb("#ffffff"), hex_to_rgb("#000000")
    elif text in COLOR_MAP:
        colors = COLOR_MAP.get(text, {})
        fg = hex_to_rgb(colors.get("fg", "#000000"))
        bg = hex_to_rgb(colors.get("bg", "#ffffff"))

    color_cache[text] = (fg, bg)
    return fg, bg

# üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏—Ö repeatCell-–∑–∞–ø—Ä–æ—Å–æ–≤
def build_formatting_requests(values, sheet_id, start_row=0, start_col=3, log_file="logs/scanner_rotationsinfo.log"):
    # log_to_file(log_file, f"üñåÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(values)} —Å—Ç—Ä–æ–∫ √ó {len(values[0]) if values else 0} –∫–æ–ª–æ–Ω–æ–∫")
    
    requests = []

    # 1Ô∏è‚É£ –û–±—â–∞—è –∑–∞–ª–∏–≤–∫–∞ ‚Äî D1:AC100
    default_fg = hex_to_rgb("#000000")
    default_bg = hex_to_rgb("#ffffff")

    total_rows = len(values)
    total_cols = len(values[0]) if values else 0

    # D = 3, AC = 29 (0-indexed, —Ç.–µ. D1:AC100)
    # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - AD (30)
    requests.append({
        "repeatCell": {
            "range": {
                "sheetId": sheet_id,
                "startRowIndex": start_row,
                "endRowIndex": start_row + total_rows,
                "startColumnIndex": start_col,
                "endColumnIndex": start_col + total_cols,  # +1 –¥–ª—è AD
            },
            "cell": {
                "userEnteredFormat": {
                    "backgroundColor": default_bg,
                    "textFormat": {
                        "foregroundColor": default_fg
                    }
                }
            },
            "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
        }
    })

    # 1.5Ô∏è‚É£ –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –ø–æ –º–µ—Ç–∫–∞–º
    # –ú–µ—Ç–∫–∏ –∏ –∏—Ö –ø–∞—Ä—ã
    marker_pairs = [
        ("VIP", "Replacements VIP"),
        ("TURKISH", "Replacements TURKISH"),
        ("GENERIC", "Replacements GENERIC"),
        ("GSBJ", "Replacements GSBJ"),
        ("LEGENDZ", "Replacements LEGENDZ"),
        ("Tri-Star", "Replacements Tri-Star"),
        ("TritonRL", "Replacements TritonRL"),
        ("Shuffle", "Replacements Shuffle"),
    ]
    marker_colors = {
        "VIP": COLOR_MAP["VIP"],
        "TURKISH": COLOR_MAP["TURKISH"],
        "GENERIC": COLOR_MAP["GENERIC"],
        "GSBJ": COLOR_MAP["GSBJ"],
        "LEGENDZ": COLOR_MAP["LEGENDZ"],
        "Tri-Star": COLOR_MAP["TRISTAR"],
        "TritonRL": COLOR_MAP["TRITONRL"],
        "Shuffle": COLOR_MAP["Shuffle"],
    }
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –º–µ—Ç–æ–∫
    marker_positions = {}
    for idx, row in enumerate(values):
        cell = str(row[0]).strip() if row else ""
        for marker, _ in marker_pairs:
            if cell == marker:
                marker_positions.setdefault(marker, []).append(idx)
        for _, repl in marker_pairs:
            if cell == repl:
                marker_positions.setdefault(repl, []).append(idx)
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å—Ç—Ä–æ–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    for marker, repl in marker_pairs:
        if marker == "TritonRL":
            # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è TritonRL
            if marker in marker_positions:
                for m_idx in marker_positions[marker]:
                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º Replacements TritonRL –Ω–∏–∂–µ
                    r_idx = None
                    if repl in marker_positions:
                        r_idx = next((i for i in marker_positions[repl] if i > m_idx), None)
                    if r_idx is None:
                        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Replacements TritonRL, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É –≤ D –Ω–∏–∂–µ TritonRL
                        for i in range(m_idx + 1, 100):
                            if i >= len(values):
                                break
                            cell_val = str(values[i][0]).strip() if values[i] else ""
                            if cell_val == "":
                                r_idx = i
                                break
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—É—Å—Ç—É—é, –∏–ª–∏ TritonRL —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ, —Ç–æ –¥–æ –∫–æ–Ω—Ü–∞
                        if r_idx is None or m_idx >= 97:
                            r_idx = 99  # 0-based, 100 —Å—Ç—Ä–æ–∫
                    color = marker_colors.get(marker)
                    if not color:
                        continue
                    try:
                        fg = hex_to_rgb(color["fg"])
                        bg = hex_to_rgb(color["bg"])
                        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å (–¥–≤–µ –ª–∏–Ω–∏–∏)
                        for row_offset in [0, 1]:
                            requests.append({
                                "repeatCell": {
                                    "range": {
                                        "sheetId": sheet_id,
                                        "startRowIndex": start_row + m_idx + row_offset,
                                        "endRowIndex": start_row + m_idx + row_offset + 1,
                                        "startColumnIndex": start_col,
                                        "endColumnIndex": start_col + total_cols + 1,  # +1 –¥–ª—è AD
                                    },
                                    "cell": {
                                        "userEnteredFormat": {
                                            "backgroundColor": bg,
                                            "textFormat": {"foregroundColor": fg}
                                        }
                                    },
                                    "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                                }
                            })
                        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å (–æ–¥–Ω–∞ –ª–∏–Ω–∏—è)
                        requests.append({
                            "repeatCell": {
                                "range": {
                                    "sheetId": sheet_id,
                                    "startRowIndex": start_row + r_idx,
                                    "endRowIndex": start_row + r_idx + 1,
                                    "startColumnIndex": start_col,
                                    "endColumnIndex": start_col + total_cols + 1,  # +1 –¥–ª—è AD
                                },
                                "cell": {
                                    "userEnteredFormat": {
                                        "backgroundColor": bg,
                                        "textFormat": {"foregroundColor": fg}
                                    }
                                },
                                "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                            }
                        })
                        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)
                        if r_idx - m_idx > 2:
                            for row in range(m_idx + 2, r_idx):
                                # –õ–µ–≤–∞—è –≥—Ä–∞–Ω—å (D)
                                requests.append({
                                    "repeatCell": {
                                        "range": {
                                            "sheetId": sheet_id,
                                            "startRowIndex": start_row + row,
                                            "endRowIndex": start_row + row + 1,
                                            "startColumnIndex": start_col,
                                            "endColumnIndex": start_col + 1,
                                        },
                                        "cell": {
                                            "userEnteredFormat": {
                                                "backgroundColor": bg,
                                                "textFormat": {"foregroundColor": fg}
                                            }
                                        },
                                        "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                                    }
                                })
                                # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å (AD)
                                requests.append({
                                    "repeatCell": {
                                        "range": {
                                            "sheetId": sheet_id,
                                            "startRowIndex": start_row + row,
                                            "endRowIndex": start_row + row + 1,
                                            "startColumnIndex": start_col + total_cols,  # AD
                                            "endColumnIndex": start_col + total_cols + 1,
                                        },
                                        "cell": {
                                            "userEnteredFormat": {
                                                "backgroundColor": bg,
                                                "textFormat": {"foregroundColor": fg}
                                            }
                                        },
                                        "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                                    }
                                })
                    except Exception:
                        continue
        else:
            if marker in marker_positions and repl in marker_positions:
                for m_idx in marker_positions[marker]:
                    r_idx = next((i for i in marker_positions[repl] if i > m_idx), None)
                    if r_idx is None:
                        continue
                    color = marker_colors.get(marker)
                    if not color:
                        continue
                    try:
                        fg = hex_to_rgb(color["fg"])
                        bg = hex_to_rgb(color["bg"])
                        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å (–¥–≤–µ –ª–∏–Ω–∏–∏)
                        for row_offset in [0, 1]:
                            requests.append({
                                "repeatCell": {
                                    "range": {
                                        "sheetId": sheet_id,
                                        "startRowIndex": start_row + m_idx + row_offset,
                                        "endRowIndex": start_row + m_idx + row_offset + 1,
                                        "startColumnIndex": start_col,
                                        "endColumnIndex": start_col + total_cols + 1,  # +1 –¥–ª—è AD
                                    },
                                    "cell": {
                                        "userEnteredFormat": {
                                            "backgroundColor": bg,
                                            "textFormat": {"foregroundColor": fg}
                                        }
                                    },
                                    "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                                }
                            })
                        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å (–æ–¥–Ω–∞ –ª–∏–Ω–∏—è)
                        requests.append({
                            "repeatCell": {
                                "range": {
                                    "sheetId": sheet_id,
                                    "startRowIndex": start_row + r_idx,
                                    "endRowIndex": start_row + r_idx + 1,
                                    "startColumnIndex": start_col,
                                    "endColumnIndex": start_col + total_cols + 1,  # +1 –¥–ª—è AD
                                },
                                "cell": {
                                    "userEnteredFormat": {
                                        "backgroundColor": bg,
                                        "textFormat": {"foregroundColor": fg}
                                    }
                                },
                                "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                            }
                        })
                        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)
                        if r_idx - m_idx > 2:
                            for row in range(m_idx + 2, r_idx):
                                # –õ–µ–≤–∞—è –≥—Ä–∞–Ω—å (D)
                                requests.append({
                                    "repeatCell": {
                                        "range": {
                                            "sheetId": sheet_id,
                                            "startRowIndex": start_row + row,
                                            "endRowIndex": start_row + row + 1,
                                            "startColumnIndex": start_col,
                                            "endColumnIndex": start_col + 1,
                                        },
                                        "cell": {
                                            "userEnteredFormat": {
                                                "backgroundColor": bg,
                                                "textFormat": {"foregroundColor": fg}
                                            }
                                        },
                                        "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                                    }
                                })
                                # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å (AD)
                                requests.append({
                                    "repeatCell": {
                                        "range": {
                                            "sheetId": sheet_id,
                                            "startRowIndex": start_row + row,
                                            "endRowIndex": start_row + row + 1,
                                            "startColumnIndex": start_col + total_cols,  # AD
                                            "endColumnIndex": start_col + total_cols + 1,
                                        },
                                        "cell": {
                                            "userEnteredFormat": {
                                                "backgroundColor": bg,
                                                "textFormat": {"foregroundColor": fg}
                                            }
                                        },
                                        "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                                    }
                                })
                    except Exception:
                        continue
    color_cache = {}

    # 2Ô∏è‚É£ –ó–∞–ª–∏–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å E1 (—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É)
    for r_idx, row in enumerate(values):
        for c_idx, cell in enumerate(row[1:], start=1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            fg, bg = resolve_colors(cell, color_cache)

            if fg == default_fg and bg == default_bg:
                continue

            requests.append({
                "repeatCell": {
                    "range": {
                        "sheetId": sheet_id,
                        "startRowIndex": start_row + r_idx,
                        "endRowIndex": start_row + r_idx + 1,
                        "startColumnIndex": start_col + c_idx,
                        "endColumnIndex": start_col + c_idx + 1,
                    },
                    "cell": {
                        "userEnteredFormat": {
                            "backgroundColor": bg,
                            "textFormat": {
                                "foregroundColor": fg
                            }
                        }
                    },
                    "fields": "userEnteredFormat(backgroundColor,textFormat.foregroundColor)"
                }
            })

    # log_to_file(log_file, f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(requests)} —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
    return requests

# üöÄ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
def format_sheet(
    service,
    spreadsheet_id,
    sheet_title,
    values,
    token_name,
    update_group,
    log_file,
    session,
    start_row=0,
    start_col=3,
    chunk_size=1500
):
    try:
        log_section(log_file, "format_sheet", f"üé® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ '{sheet_title}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not values or not isinstance(values, list) or not all(isinstance(row, list) for row in values):
            log_error(log_file, "format_sheet", None, "invalid_data", "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        sheet_metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheet_id = next(
            (s["properties"]["sheetId"] for s in sheet_metadata["sheets"]
             if s["properties"]["title"] == sheet_title),
            None
        )
        if sheet_id is None:
            raise ValueError(f"‚ùå –õ–∏—Å—Ç '{sheet_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            formatting_requests = build_formatting_requests(values, sheet_id, start_row, start_col, log_file)
        except Exception as e:
            log_error(log_file, "format_sheet", None, "build_requests_fail", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return

        success = True

        for i in range(0, len(formatting_requests), chunk_size):
            chunk = formatting_requests[i:i + chunk_size]
            for attempt in range(3):
                try:
                    service.spreadsheets().batchUpdate(
                        spreadsheetId=spreadsheet_id,
                        body={"requests": chunk}
                    ).execute()
                    log_info(log_file, "format_sheet", None, "batch", f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Ä—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {i}‚Äì{i + len(chunk)}.")
                    break
                except (socket.timeout, Exception) as e:
                    log_error(log_file, "format_sheet", None, "fail", f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} ‚Äî –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ä—Ü–∏–∏ {i}‚Äì{i + len(chunk)}", exc=e)
                    if attempt < 2:
                        time.sleep(5)
                    else:
                        success = False

        if success:
            log_success(log_file, "format_sheet", None, "done", f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ '{sheet_title}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        else:
            log_warning(log_file, "format_sheet", None, "fail", f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ '{sheet_title}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")

    except Exception as e:
        log_error(log_file, "format_sheet", None, "fail", f"‚ùå –û—à–∏–±–∫–∞ –≤ format_sheet()", exc=e)
        raise

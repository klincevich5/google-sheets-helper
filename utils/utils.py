# utils/utils.py

import time
import os
import json

from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from core.time_provider import TimeProvider
from core.config import RETRIES, DELAY_SECONDS

from utils.logger import (
    log_info, log_success, log_warning, log_error, log_section, log_separator
)
# from utils.db_orm import insert_usage

##################################################################################
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
##################################################################################

def load_credentials(token_path, log_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Google Sheets API.

    Args:
        token_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–æ–∫–µ–Ω–∞.
        log_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∂—É—Ä–Ω–∞–ª–∞.

    Returns:
        service: –û–±—ä–µ–∫—Ç —Å–ª—É–∂–±—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Sheets API.

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        RuntimeError: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
    """
    if not os.path.exists(token_path):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {token_path}")

    token_name = os.path.basename(token_path).replace("_token.json", "")
    success = False

    # try:
    with open(token_path, encoding="utf-8") as f:
        token = json.load(f)
    creds = Credentials(
        token=token["access_token"],
        refresh_token=token.get("refresh_token"),
        token_uri=token["token_uri"],
        client_id=token["client_id"],
        client_secret=token["client_secret"],
        scopes=token.get("scopes", ["https://www.googleapis.com/auth/spreadsheets"])
    )

    if not creds.valid and creds.refresh_token:
        try:
            creds.refresh(Request())
            with open(token_path, "w", encoding="utf-8") as token_file:
                token_file.write(creds.to_json())
            log_info(log_file, "load_credentials", None, "token_refresh", f"üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {token_path}")
        except Exception as e:
            log_error(log_file, "load_credentials", None, "token_refresh_fail", f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_path}", exc=e)
        raise


    if not creds.valid:
        raise RuntimeError(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {token_path}")

    service = build("sheets", "v4", credentials=creds)
    log_success(log_file, "load_credentials", None, "auth", f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {token_name}")
    success = True
    return service

##################################################################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
##################################################################################

def check_sheet_exists(service, spreadsheet_id, sheet_name, log_file, token_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Google Sheets.

    Args:
        service: –û–±—ä–µ–∫—Ç —Å–ª—É–∂–±—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Sheets API.
        spreadsheet_id (str): ID —Ç–∞–±–ª–∏—Ü—ã.
        sheet_name (str): –ò–º—è –ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        log_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∂—É—Ä–Ω–∞–ª–∞.
        token_name (str): –ò–º—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞.

    Returns:
        bool: True, –µ—Å–ª–∏ –ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
    """
    success = False
    try:
        metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheets = metadata.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title')
            if title == sheet_name:
                success = True
                return True
        return False

    except Exception as e:
        log_error(log_file, "check_sheet_exists", None, "fail", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Å—Ç–∞ –≤ {spreadsheet_id}", exc=e)
        return False

    finally:
        token_name = os.path.basename(token_name).replace("_token.json", "")
 
##################################################################################
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
##################################################################################

def batch_get(service, spreadsheet_id, ranges, scan_group, log_file, token_name, retries=RETRIES, delay_seconds=DELAY_SECONDS):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ç–∞–±–ª–∏—Ü—ã Google Sheets.

    Args:
        service: –û–±—ä–µ–∫—Ç —Å–ª—É–∂–±—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Sheets API.
        spreadsheet_id (str): ID —Ç–∞–±–ª–∏—Ü—ã.
        ranges (list): –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        scan_group: ?
        log_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∂—É—Ä–Ω–∞–ª–∞.
        token_name (str): –ò–º—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞.
        retries (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).
        delay_seconds (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ø–∏—Å–∫–∏ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
    """
    attempt = 0
    success = False
    data = {}

    while attempt < retries:
        try:
            response = service.spreadsheets().values().batchGet(
                spreadsheetId=spreadsheet_id,
                ranges=ranges,
                majorDimension="ROWS"
            ).execute()

            value_ranges = response.get("valueRanges", [])
            if not value_ranges:
                log_warning(log_file, "batch_get", None, "empty", "‚ö†Ô∏è batchGet –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ valueRanges.")
                attempt += 1
                time.sleep(delay_seconds)
                continue

            data = {vr.get("range", ""): vr.get("values", []) for vr in value_ranges}
            success = True
            break

        except HttpError as e:
            status_code = e.resp.status
            log_error(log_file, "batch_get", None, "http_error", f"‚ùå HttpError {status_code} –ø—Ä–∏ batchGet", exc=e)
            if status_code in (429, 500, 503):
                attempt += 1
                time.sleep(delay_seconds)
            elif status_code == 401:
                break
            else:
                break

        except Exception as e:
            msg = str(e).lower()
            if any(term in msg for term in ["ssl", "handshake", "decryption", "timed out"]):
                attempt += 1
                time.sleep(delay_seconds)
            else:
                log_error(log_file, "batch_get", None, "fail", f"‚ùå –û—à–∏–±–∫–∞ batchGet", exc=e)
                break

    return data if success else {}

##################################################################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
##################################################################################

def batch_update(service, spreadsheet_id, batch_data, token_name, update_group, log_file, retries=RETRIES, delay_seconds=DELAY_SECONDS):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ Google Sheets, –∑–∞–ø–∏—Å—ã–≤–∞—è –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã.

    Args:
        service: –û–±—ä–µ–∫—Ç —Å–ª—É–∂–±—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Sheets API.
        spreadsheet_id (str): ID —Ç–∞–±–ª–∏—Ü—ã.
        batch_data (list): –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.
        token_name (str): –ò–º—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞.
        update_group: ?
        log_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∂—É—Ä–Ω–∞–ª–∞.
        retries (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).
        delay_seconds (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).

    Returns:
        tuple: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≥–¥–µ –ø–µ—Ä–≤—ã–π - –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏,
               –∞ –≤—Ç–æ—Ä–æ–π - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞.
    """
    success = False
    attempt = 0

    token_name = os.path.basename(token_name).replace("_token.json", "")

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    try:
        clear_ranges = [entry["range"] for entry in batch_data if "range" in entry]
        if clear_ranges:
            service.spreadsheets().values().batchClear(
                spreadsheetId=spreadsheet_id,
                body={"ranges": clear_ranges}
            ).execute()
    except Exception as e:
        log_warning(log_file, "batch_update", None, "clear_fail", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤", message=str(e))

    # –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
    while attempt < retries:
        try:
            response = service.spreadsheets().values().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body={
                    "valueInputOption": "USER_ENTERED",
                    "data": batch_data
                }
            ).execute()

            if response and 'responses' in response:
                success = True
                break
            else:
                log_warning(log_file, "batch_update", None, "empty", "‚ö†Ô∏è batchUpdate –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                attempt += 1
                time.sleep(delay_seconds)

        except HttpError as e:
            status = e.resp.status
            log_error(log_file, "batch_update", None, "http_error", f"‚ùå HttpError {status} –ø—Ä–∏ batchUpdate", exc=e)
            if status in [429, 500, 503]:
                attempt += 1
                time.sleep(delay_seconds)
            elif status == 401:
                break
            else:
                break

        except Exception as e:
            log_error(log_file, "batch_update", None, "fail", f"‚ùå –û—à–∏–±–∫–∞ batchUpdate", exc=e)
            break
    
    return (True, None) if success else (False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫" if attempt == retries else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

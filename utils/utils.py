# utils/utils.py

import os
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from utils.logger import log_to_file


def load_credentials(token_path, log_file):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏,
    –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Google Sheets service.
    """
    creds = None
    if not os.path.exists(token_path):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {token_path}")

    creds = Credentials.from_authorized_user_file(token_path)

    if creds and creds.expired and creds.refresh_token:
        try:
            creds.refresh(Request())
            log_to_file(log_file, f"üîÑ –¢–æ–∫–µ–Ω –≤ {token_path} –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

            with open(token_path, "w", encoding="utf-8") as token_file:
                token_file.write(creds.to_json())
        except Exception as e:
            log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token_path}: {e}")
            raise

    if not creds or not creds.valid:
        raise RuntimeError(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {token_path}")

    service = build("sheets", "v4", credentials=creds)
    return service

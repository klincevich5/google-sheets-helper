import time
import os
import json

from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from datetime import datetime, timedelta
from core.config import TIMEZONE
from zoneinfo import ZoneInfo

from utils.logger import log_to_file
from utils.db_orm import insert_usage

try:
    timezone = ZoneInfo(TIMEZONE)
except Exception as e:
    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TIMEZONE: {TIMEZONE}. –û—à–∏–±–∫–∞: {e}")

def get_current_shift_and_date(now: datetime = None) -> tuple[str, datetime.date]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∏–ø —Å–º–µ–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Å–º–µ–Ω—ã.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        ("day"/"night", date) ‚Äî –≥–¥–µ date –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—á–µ—Ä–∞, –µ—Å–ª–∏ –Ω–æ—á—å –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
    """
    if now is None:
        now = datetime.now(timezone)

    hour = now.hour

    if 9 <= hour < 21:
        return "day", now.date()
    else:
        # –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞
        if hour < 9:  # 00:00‚Äì08:59 ‚Äî —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            shift_date = (now - timedelta(days=1)).date()
        else:  # 21:00‚Äì23:59 ‚Äî –Ω–æ—á—å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            shift_date = now.date()
        return "night", shift_date

##################################################################################
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
##################################################################################

def load_credentials(token_path, log_file, session):
    if not os.path.exists(token_path):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {token_path}")

    token_name = os.path.basename(token_path).replace("_token.json", "")
    success = False

    try:
        with open(token_path, encoding="utf-8") as f:
            token = json.load(f)
        creds = Credentials(
            token=token["access_token"],
            refresh_token=token.get("refresh_token"),
            token_uri=token["token_uri"],
            client_id=token["client_id"],
            client_secret=token["client_secret"],
            scopes=token.get("scopes", ["https://www.googleapis.com/auth/spreadsheets"])
        )

        if creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
                with open(token_path, "w", encoding="utf-8") as token_file:
                    token_file.write(creds.to_json())
                log_to_file(log_file, f"üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {token_path}")
                insert_usage(session, token=token_name, count=1, scan_group="token_refresh", success=True)
            except Exception as e:
                log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_path}: {e}")
                insert_usage(session, token=token_name, count=1, scan_group="token_refresh", success=False)
                raise

        if not creds.valid:
            raise RuntimeError(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {token_path}")

        service = build("sheets", "v4", credentials=creds)
        log_to_file(log_file, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {token_name}")
        success = True
        return service

    finally:
        insert_usage(session, token=token_name, count=1, scan_group="load_credentials", success=success)
        log_to_file(log_file, f"after insert_usage: {token_name}")

##################################################################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
##################################################################################

def check_sheet_exists(service, spreadsheet_id, sheet_name, log_file, token_name, session):
    success = False
    try:
        metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheets = metadata.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title')
            if title == sheet_name:
                success = True
                return True
        return False

    except Exception as e:
        log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Å—Ç–∞ –≤ {spreadsheet_id}: {e}")
        return False

    finally:
        token_name = os.path.basename(token_name).replace("_token.json", "")
        insert_usage(session, token=token_name, count=1, scan_group="check_sheet", success=success)

##################################################################################
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
##################################################################################

def batch_get(service, spreadsheet_id, ranges, scan_group, log_file, token_name, session, retries=5, delay_seconds=5):
    attempt = 0
    success = False
    data = {}

    while attempt < retries:
        try:
            response = service.spreadsheets().values().batchGet(
                spreadsheetId=spreadsheet_id,
                ranges=ranges,
                majorDimension="ROWS"
            ).execute()

            value_ranges = response.get("valueRanges", [])
            if not value_ranges:
                log_to_file(log_file, "‚ö†Ô∏è batchGet –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ valueRanges.")
                attempt += 1
                time.sleep(delay_seconds)
                continue

            data = {vr.get("range", ""): vr.get("values", []) for vr in value_ranges}
            success = True
            break

        except HttpError as e:
            status_code = e.resp.status
            log_to_file(log_file, f"‚ùå HttpError {status_code} –ø—Ä–∏ batchGet: {e}")
            if status_code in (429, 500, 503):
                attempt += 1
                time.sleep(delay_seconds)
            elif status_code == 401:
                break
            else:
                break

        except Exception as e:
            msg = str(e).lower()
            if any(term in msg for term in ["ssl", "handshake", "decryption", "timed out"]):
                attempt += 1
                time.sleep(delay_seconds)
            else:
                log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ batchGet: {e}")
                break

    insert_usage(
        session,
        token=os.path.basename(token_name).replace("_token.json", ""),
        count=attempt + 1,
        scan_group=scan_group,
        success=success
    )

    return data if success else {}

##################################################################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
##################################################################################

def batch_update(service, spreadsheet_id, batch_data, token_name, update_group, log_file, session, retries=3, delay_seconds=10):
    success = False
    attempt = 0

    token_name = os.path.basename(token_name).replace("_token.json", "")

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    try:
        clear_ranges = [entry["range"] for entry in batch_data if "range" in entry]
        if clear_ranges:
            service.spreadsheets().values().batchClear(
                spreadsheetId=spreadsheet_id,
                body={"ranges": clear_ranges}
            ).execute()
    except Exception as e:
        log_to_file(log_file, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {e}")

    # –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
    while attempt < retries:
        try:
            response = service.spreadsheets().values().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body={
                    "valueInputOption": "USER_ENTERED",
                    "data": batch_data
                }
            ).execute()

            if response and 'responses' in response:
                success = True
                break
            else:
                log_to_file(log_file, "‚ö†Ô∏è batchUpdate –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                attempt += 1
                time.sleep(delay_seconds)

        except HttpError as e:
            status = e.resp.status
            log_to_file(log_file, f"‚ùå HttpError {status} –ø—Ä–∏ batchUpdate: {e}")
            if status in [429, 500, 503]:
                attempt += 1
                time.sleep(delay_seconds)
            elif status == 401:
                break
            else:
                break

        except Exception as e:
            log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ batchUpdate: {e}")
            break

    insert_usage(session,
                 token=token_name,
                 count=attempt + 1,
                 update_group=update_group,
                 success=success
    )
    
    return (True, None) if success else (False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫" if attempt == retries else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

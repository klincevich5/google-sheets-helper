# utils/utils.py

import time
import json
from googleapiclient.errors import HttpError

import os
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from utils.logger import log_to_file
from database.database import insert_usage  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

from googleapiclient.http import HttpRequest

##################################################################################
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–æ—Ç—ã —Ç–æ–∫–µ–Ω–∞
##################################################################################

class LoggingHttpRequest(HttpRequest):
    def execute(self, **kwargs):
        response = super().execute(**kwargs)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        self._response_headers = getattr(self, "resp", {}).headers if hasattr(self, "resp") else {}

        return response

    def get_response_headers(self):
        return getattr(self, "_response_headers", {})

#################################################################################
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API
#################################################################################

def load_credentials(token_path, log_file):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞.–´
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Google Sheets API –∫–ª–∏–µ–Ω—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–≤–æ—Ç—ã —Ç–æ–∫–µ–Ω–∞.
    """
    if not os.path.exists(token_path):
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {token_path}")

    token_name = os.path.basename(token_path).replace("_token.json", "")
    success = False

    try:
        creds = Credentials.from_authorized_user_file(token_path)

        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
                with open(token_path, "w", encoding="utf-8") as token_file:
                    token_file.write(creds.to_json())

                log_to_file(log_file, f"üîÑ –¢–æ–∫–µ–Ω –≤ {token_path} –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

                insert_usage(
                    token=token_name,
                    count=1,
                    scan_group="token_refresh",
                    success=True
                )
            except Exception as e:
                log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token_path}: {e}")
                insert_usage(
                    token=token_name,
                    count=1,
                    scan_group="token_refresh",
                    success=False
                )
                raise

        if not creds or not creds.valid:
            raise RuntimeError(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {token_path}")

        service = build("sheets", "v4", credentials=creds, requestBuilder=LoggingHttpRequest)
        log_to_file(log_file, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º '{token_name}'")
        success = True
        return service

    finally:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ load_credentials –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        token_name = os.path.basename(token_name).replace("_token.json", "")
        insert_usage(
            token=token_name,
            count=1,
            scan_group="load_credentials",
            success=success
        )

##################################################################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
##################################################################################

def check_sheet_exists(service, spreadsheet_id, sheet_name, log_file, token_name):
    success = False
    try:
        metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheets = metadata.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title')
            if title == sheet_name:
                success = True
                return True
        return False

    except Exception as e:
        log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Å—Ç–∞ –≤ {spreadsheet_id}: {e}")
        return False

    finally:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        token_name = os.path.basename(token_name).replace("_token.json", "")
        insert_usage(
            token=token_name,
            count=1,
            scan_group="check_sheet",
            success=success
        )
###################################################################################
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
###################################################################################

def batch_get(service, spreadsheet_id, ranges, scan_group, log_file, token_name, retries=5, delay_seconds=5):
    attempt = 0
    success = False
    data = {}

    while attempt < retries:
        try:
            # log_to_file(
            #     log_file,
            #     f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries} ‚Äî batchGet –¥–ª—è {len(ranges)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ {spreadsheet_id}"
            # )

            request = service.spreadsheets().values().batchGet(
                spreadsheetId=spreadsheet_id,
                ranges=ranges,
                majorDimension="ROWS"
            )

            response = request.execute()

            value_ranges = response.get("valueRanges", [])
            data = {vr.get("range", ""): vr.get("values", []) for vr in value_ranges}

            # log_to_file(log_file, f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π batchGet. –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–≤–æ—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LoggingHttpRequest
            if hasattr(request, "get_response_headers"):
                headers = request.get_response_headers()
                if headers and isinstance(headers, dict):
                    quota_info = {
                        "X-RateLimit-Remaining": headers.get("X-RateLimit-Remaining"),
                        "X-Goog-Quota-Used": headers.get("X-Goog-Quota-Used"),
                        "X-Goog-Quota-Limit": headers.get("X-Goog-Quota-Limit")
                    }
                    # log_to_file(log_file, f"üìä –ö–≤–æ—Ç–∞ —Ç–æ–∫–µ–Ω–∞ {token_name}: {quota_info}")
            else:
                log_to_file(log_file, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–≤–æ—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.")
            success = True
            break

        except HttpError as e:
            status_code = e.resp.status
            log_to_file(log_file, f"‚ùå HttpError {status_code} –ø—Ä–∏ batchGet: {e}")

            if status_code in (429, 500, 503):
                attempt += 1
                log_to_file(log_file, f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay_seconds)
            elif status_code == 401:
                log_to_file(log_file, "üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401). –ü—Ä–µ—Ä—ã–≤–∞—é batchGet.")
                break
            else:
                break

        except Exception as e:
            msg = str(e).lower()
            if any(term in msg for term in ["ssl", "handshake", "decryption", "timed out"]):
                attempt += 1
                log_to_file(log_file, f"‚è≥ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ '{e}', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay_seconds)
            else:
                log_to_file(log_file, f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ batchGet: {e}")
                break

    token_name = os.path.basename(token_name).replace("_token.json", "")

    insert_usage(
        token=token_name,
        count=attempt + 1,
        scan_group=scan_group,
        success=success
    )

    if not success:
        log_to_file(log_file, "‚ùå batchGet –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–µ—É–¥–∞—á–Ω–æ.")

    return data if success else {}

###################################################################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
###################################################################################

def batch_update(service, spreadsheet_id, batch_data, token_name, update_group, log_file, retries=3, delay_seconds=10):
    success = False
    attempt = 0

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ç–æ–∫–µ–Ω–∞
    token_name = os.path.basename(token_name).replace("_token.json", "")

    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    try:
        clear_ranges = [entry["range"] for entry in batch_data if "range" in entry]
        if clear_ranges:
            service.spreadsheets().values().batchClear(
                spreadsheetId=spreadsheet_id,
                body={"ranges": clear_ranges}
            ).execute()
            log_to_file(log_file, f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π: {len(clear_ranges)}")
    except Exception as e:
        log_to_file(log_file, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {e}")

    while attempt < retries:
        try:
            request = service.spreadsheets().values().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body={
                    "valueInputOption": "USER_ENTERED",
                    "data": batch_data
                }
            )

            response = request.execute()

            if hasattr(request, "get_response_headers"):
                headers = request.get_response_headers()
                if headers and isinstance(headers, dict):
                    quota_info = {
                        "X-RateLimit-Remaining": headers.get("X-RateLimit-Remaining"),
                        "X-Goog-Quota-Used": headers.get("X-Goog-Quota-Used"),
                        "X-Goog-Quota-Limit": headers.get("X-Goog-Quota-Limit")
                    }
            else:
                log_to_file(log_file, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–≤–æ—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.")

            success = True
            break

        except HttpError as e:
            status = e.resp.status
            log_to_file(log_file, f"‚ùå HttpError {status} –ø—Ä–∏ batchUpdate: {e}")

            if status in [429, 500, 503]:
                attempt += 1
                log_to_file(log_file, f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫...")
                time.sleep(delay_seconds)
            elif status == 401:
                log_to_file(log_file, "üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401). –ü—Ä–µ—Ä—ã–≤–∞—é batchUpdate.")
                break
            else:
                break

        except Exception as e:
            log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ batchUpdate: {e}")
            break

    insert_usage(
        token=token_name,
        count=attempt + 1,
        update_group=update_group,
        success=success
    )

    return (True, None) if success else (False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫" if attempt == retries else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

##################################################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
##################################################################################

def update_task_process_fields(conn, task, log_file, table_name):
    cursor = conn.cursor()
    table = table_name
    cursor.execute(f"""
        UPDATE {table}
        SET
            hash = ?,
            values_json = ?
        WHERE id = ?
    """, (
        task.hash,
        json.dumps(task.values_json) if task.values_json else None,
        task.id
    ))
    # log_to_file(log_file, f"üíæ –û–±–Ω–æ–≤–ª—ë–Ω values_json –∏ hash –¥–ª—è –∑–∞–¥–∞—á–∏ {task.name_of_process}")
    conn.commit()

##################################################################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∑–∞–¥–∞—á–∏ –≤ –ë–î
##################################################################################

def update_task_scan_fields(conn, task, log_file, table_name):
    cursor = conn.cursor()
    cursor.execute(f"""
        UPDATE {table_name}
        SET
            last_scan = ?,
            scan_quantity = ?,
            scan_failures = ?
        WHERE id = ?
    """, (
        task.last_scan.isoformat() if task.last_scan else None,
        task.scan_quantity,
        task.scan_failures,
        task.id
    ))

    #log_to_file(log_file, f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –ë–î [Task {task.name_of_process}] ‚Üí proceed={task.proceed} ‚Üí changed={task.changed}, hash={task.hash}")
    conn.commit()

###################################################################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∑–∞–¥–∞—á–∏ –≤ –ë–î
###################################################################################

def update_task_update_fields(conn, task, log_file, table_name):
    cursor = conn.cursor()
    cursor.execute(f"""
        UPDATE {table_name}
        SET
            last_update = ?,
            update_quantity = ?,
            update_failures = ?
        WHERE id = ?
    """, (
        task.last_update.isoformat() if task.last_update else None,
        task.update_quantity,
        task.update_failures,
        task.id
    ))
    conn.commit()
    # log_to_file(log_file, f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π update –¥–ª—è –∑–∞–¥–∞—á–∏ [{task.name_of_process}] –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

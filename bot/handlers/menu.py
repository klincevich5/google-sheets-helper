# bot/handlers/menu.py

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest
from bot.states import MenuStates
from zoneinfo import ZoneInfo
from core.config import AUTHORIZED_USERS, TIMEZONE
from bot.keyboards import main_menu_kb, rotations_shift_kb, task_kb, scanner_log_kb
from bot.utils_bot import (
    get_surrounding_tabs, get_logs_for_scanner, get_logs_for_shift,
    get_logs_for_rot_task, get_logs_for_sheet_task, get_current_datetime, get_connection
)
from bot.db_access import (
    get_rotations_stats, get_all_tracked_tables,
    get_rotations_tasks_by_tab, get_task_by_id,
    get_sheets_stats, get_sheets_tasks, get_sheet_by_id
)
from datetime import datetime

from bot.utils_bot import format_datetime_pl
from bot.settings_access import is_scanner_enabled, set_scanner_enabled

router = Router()

def generate_main_menu_text():
    now = get_current_datetime()
    stats_rot = get_rotations_stats()
    stats_sheets = get_sheets_stats()
    tracked = get_all_tracked_tables()

    return (
        f"<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Google Sheets.</b>\n\n"
        f"üìä <b>RotationsInfo:</b> {stats_rot['total']} –∑–∞–¥–∞—á, {stats_rot['errors']} –æ—à–∏–±–æ–∫\n"
        f"üìã <b>SheetsInfo:</b> {stats_sheets['total']} –∑–∞–¥–∞—á, {stats_sheets['errors']} –æ—à–∏–±–æ–∫\n"
        f"üì¶ <b>TrackedTables:</b> {len(tracked)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
        f"üîê <b>–¢–æ–∫–µ–Ω:</b> –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"üïí <i>{now}</i>"
    )

@router.message(F.text == "/start")
async def handle_start(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in AUTHORIZED_USERS:
        return await msg.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    
    await state.clear()
    await state.set_state(MenuStates.MAIN_MENU)

    await msg.answer(generate_main_menu_text(), reply_markup=main_menu_kb())

@router.callback_query(F.data == "rotations")
async def handle_rotations(query: CallbackQuery, state: FSMContext):
    await state.set_state(MenuStates.ROTATIONS_MENU)

    now = datetime.now(ZoneInfo(TIMEZONE))
    shift = "Day shift" if 6 <= now.hour < 18 else "Night shift"
    time_str = now.strftime("%d.%m.%Y %H:%M")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å–º–µ–Ω–∞–º
    tabs = get_surrounding_tabs()
    all_tasks = []
    for tab in tabs:
        tasks = get_rotations_tasks_by_tab(tab)
        for t in tasks:
            t["shift"] = tab
        all_tasks.extend(tasks)

    stats = get_rotations_stats()
    total = stats["total"]
    errors = stats["errors"]

    # –ù–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ scan_failures, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ª–∏–º–∏—Ç)
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT name_of_process, scan_failures FROM RotationsInfo
        WHERE scan_failures > 0
        ORDER BY scan_failures DESC
        LIMIT 5
    """)
    top_errors = cursor.fetchall()
    conn.close()

    lines = [
        f"üïí {shift} {time_str}",
        f"üîÅ –ù–∞–π–¥–µ–Ω–æ {total} –∑–∞–¥–∞—á –≤ RotationsInfo",
        f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}\n",
        "<b>üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>"
    ]

    for name, fails in top_errors:
        lines.append(f"‚ùå {name} ‚Äî {fails} –æ—à–∏–±–æ–∫")

    text = "\n".join(lines)
    await query.message.edit_text(text, reply_markup=rotations_shift_kb(tabs))

@router.callback_query(F.data.startswith("shift:"))
async def handle_shift(query: CallbackQuery, state: FSMContext):
    tab = query.data.split(":")[1]
    await state.update_data(selected_shift=tab)
    tasks = get_rotations_tasks_by_tab(tab)
    await state.set_state(MenuStates.SHIFT_SELECTED)
    await query.message.edit_text(f"üìã –ó–∞–¥–∞—á–∏ –≤ —Å–º–µ–Ω–µ {tab}:", reply_markup=task_kb(tasks))

@router.callback_query(F.data.startswith("task:"))
async def handle_task(query: CallbackQuery, state: FSMContext):
    task_id = query.data.split(":")[1]
    task = get_task_by_id(task_id)
    if not task:
        return await query.message.edit_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    await state.set_state(MenuStates.TASK_SELECTED)
    await state.update_data(selected_task_id=task_id, task_source="rotations")

    scan_ok = max(0, task['scan_quantity'] - task['scan_failures'])
    update_ok = max(0, task['update_quantity'] - task['update_failures'])

    text = (
        f"<b>üìÑ –ü—Ä–æ—Ü–µ—Å—Å:</b> {task['name']}\n"
        f"<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫:</b> {task['source']}\n"
        f"<b>üßÆ –•–µ—à:</b> <code>{task['hash']}</code>\n"
        f"<b>üïì –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {task['scan_interval']} —Å–µ–∫\n"
        "\n"
        f"<b>üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {format_datetime_pl(task['last_scan'])}\n"
        f"–í—Å–µ–≥–æ: {task['scan_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {scan_ok} | ‚ùå –û—à–∏–±–∫–∏: {task['scan_failures']}\n"
        "\n"
        f"<b>üì§ –í—Å—Ç–∞–≤–∫–∞</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è: {format_datetime_pl(task['last_update'])}\n"
        f"–í—Å–µ–≥–æ: {task['update_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {update_ok} | ‚ùå –û—à–∏–±–∫–∏: {task['update_failures']}"
    )

    if task["scan_failures"] > 0 or task["update_failures"] > 0:
        text += (
            "\n\n<b>üßæ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n"
            "<i>üîç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥</i>"
        )

    await query.message.edit_text(text, reply_markup=scanner_log_kb("task", "rotations"))

@router.callback_query(F.data.startswith("rotations_action:"))
async def handle_rotations_action(query: CallbackQuery, state: FSMContext):
    action = query.data.split(":")[1]
    data = await state.get_data()
    task_id = data.get("selected_task_id")

    if not task_id:
        return await query.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)

    conn = get_connection()
    cursor = conn.cursor()
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        if action == "scan":
            cursor.execute("UPDATE RotationsInfo SET last_scan = ?, scan_quantity = scan_quantity + 1 WHERE id = ?", (now, task_id))
            result = "üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        elif action == "update":
            cursor.execute("UPDATE RotationsInfo SET last_update = ?, update_quantity = update_quantity + 1 WHERE id = ?", (now, task_id))
            result = "üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ"
        elif action == "clear":
            cursor.execute("UPDATE RotationsInfo SET scan_failures = 0, update_failures = 0 WHERE id = ?", (task_id,))
            result = "üßπ –û—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
        else:
            result = "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        conn.commit()
    except Exception as e:
        result = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    finally:
        conn.close()

    await query.answer(result)
    await update_task_view(query, task_id)

@router.callback_query(F.data.startswith("logs:"))
async def handle_logs(query: CallbackQuery, state: FSMContext):
    level = query.data.split(":")[1]
    data = await state.get_data()
    source = data.get("task_source")
    
    if level == "scanner":
        text = get_logs_for_scanner()
    elif level == "shift":
        text = get_logs_for_shift(data.get("selected_shift"))
    elif level == "task":
        task_id = data.get("selected_task_id") if source == "rotations" else data.get("selected_sheet_id")
        if source == "rotations":
            text = get_logs_for_rot_task(task_id)
        elif source == "sheets":
            text = get_logs_for_sheet_task(task_id)
        else:
            text = "‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    else:
        text = "‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    try:
        await query.message.edit_text(f"ü™µ –õ–æ–≥–∏:\n\n{text[-4000:]}", reply_markup=scanner_log_kb(level, source))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await query.answer("‚ö†Ô∏è –£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", show_alert=False)
        else:
            raise

# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å (–Ω–∞–∑–∞–¥, sheets, tracked) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏ `task_source` –ø—Ä–∏ –≤—ã–±–æ—Ä–µ sheet

# --- –ù–∞–∑–∞–¥ / –î–æ–º–æ–π ---
@router.callback_query(F.data == "back:main")
async def back_main(query: CallbackQuery, state: FSMContext):
    await state.set_state(MenuStates.MAIN_MENU)
    await query.message.edit_text(generate_main_menu_text(), reply_markup=main_menu_kb())

@router.callback_query(F.data == "back:rotations")
async def back_rotations(query: CallbackQuery, state: FSMContext):
    await state.set_state(MenuStates.ROTATIONS_MENU)
    tabs = get_surrounding_tabs()
    await query.message.edit_text("üîÅ –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=rotations_shift_kb(tabs))

@router.callback_query(F.data == "back:shift")
async def back_shift(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tab = data.get("selected_shift")
    tasks = get_rotations_tasks_by_tab(tab)
    await state.set_state(MenuStates.SHIFT_SELECTED)
    await query.message.edit_text(f"üìã –ó–∞–¥–∞—á–∏ –≤ —Å–º–µ–Ω–µ {tab}:", reply_markup=task_kb(tasks))

@router.callback_query(F.data == "sheets")
async def handle_sheets_menu(query: CallbackQuery, state: FSMContext):
    await state.set_state(MenuStates.SHEETS_MENU)
    tasks = get_sheets_tasks()

    if not tasks:
        return await query.message.edit_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∏ SheetsInfo –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    now = datetime.now(ZoneInfo(TIMEZONE))
    shift = "Day shift" if 6 <= now.hour < 18 else "Night shift"
    time_str = now.strftime("%d.%m.%Y %H:%M")

    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total = len(tasks)
    failures = sum(t["failures"] for t in tasks)
    avg_fail = round(failures / total, 2) if total else 0

    # –¢–û–ü-5 –∑–∞–¥–∞—á —Å –æ—à–∏–±–∫–∞–º–∏
    problematic = sorted(tasks, key=lambda x: x["failures"], reverse=True)[:5]

    lines = [
        f"üïí {shift} {time_str}",
        f"üìã –ù–∞–π–¥–µ–Ω–æ {total} –∑–∞–¥–∞—á –≤ SheetsInfo",
        f"‚ö†Ô∏è –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {failures}, —Å—Ä–µ–¥–Ω–µ: {avg_fail}\n",
        "<b>üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>"
    ]

    for t in problematic:
        if t["failures"] == 0:
            continue
        lines.append(f"‚ùå {t['name']} ‚Äî {t['failures']} –æ—à–∏–±–æ–∫")

    text = "\n".join(lines)[:4000]

    # –ö–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    rows = []
    row = []
    for task in tasks:
        row.append(InlineKeyboardButton(text=task["name"], callback_data=f"sheet:{task['id']}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)

    rows.append([InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="back:main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

    await query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("sheet:"))
async def handle_sheet_task(query: CallbackQuery, state: FSMContext):
    sheet_id = query.data.split(":")[1]
    sheet = get_sheet_by_id(sheet_id)
    if not sheet:
        return await query.message.edit_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    await state.set_state(MenuStates.SHEET_TASK_SELECTED)
    await state.update_data(selected_sheet_id=sheet_id, task_source="sheets")

    scan_ok = max(0, sheet['scan_quantity'] - sheet['scan_failures'])
    update_ok = max(0, sheet['update_quantity'] - sheet['update_failures'])

    text = (
        f"<b>üìÑ –ü—Ä–æ—Ü–µ—Å—Å:</b> {sheet['name']}\n"
        f"<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫:</b> {sheet['source']}\n"
        f"<b>üßÆ –•–µ—à:</b> <code>{sheet['hash']}</code>\n"
        f"<b>üïì –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {sheet['scan_interval']} —Å–µ–∫\n"
        "\n"
        f"<b>üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {format_datetime_pl(sheet['last_scan'])}\n"
        f"–í—Å–µ–≥–æ: {sheet['scan_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {scan_ok} | ‚ùå –û—à–∏–±–∫–∏: {sheet['scan_failures']}\n"
        "\n"
        f"<b>üì§ –í—Å—Ç–∞–≤–∫–∞</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è: {format_datetime_pl(sheet['last_update'])}\n"
        f"–í—Å–µ–≥–æ: {sheet['update_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {update_ok} | ‚ùå –û—à–∏–±–∫–∏: {sheet['update_failures']}"
    )

    if sheet["scan_failures"] > 0 or sheet["update_failures"] > 0:
        text += (
            "\n\n<b>üßæ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n"
            "<i>üîç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥</i>"
        )

    action_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="sheet_action:scan"),
            InlineKeyboardButton(text="üì§ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="sheet_action:update")
        ],
        [
            InlineKeyboardButton(text="üßπ –°–±—Ä–æ—Å", callback_data="sheet_action:clear"),
            InlineKeyboardButton(text="ü™µ –õ–æ–≥–∏", callback_data="logs:task")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back:sheets"),
            InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="back:main")
        ]
    ])

    await query.message.edit_text(text, reply_markup=scanner_log_kb("task", "sheets"))

@router.callback_query(F.data.startswith("sheets_action:"))
async def handle_sheet_action(query: CallbackQuery, state: FSMContext):
    action = query.data.split(":")[1]
    data = await state.get_data()
    sheet_id = data.get("selected_sheet_id")

    if not sheet_id:
        return await query.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)

    conn = get_connection()
    cursor = conn.cursor()
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        if action == "scan":
            cursor.execute("UPDATE SheetsInfo SET last_scan = ?, scan_quantity = scan_quantity + 1 WHERE id = ?", (now, sheet_id))
            result = "üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        elif action == "update":
            cursor.execute("UPDATE SheetsInfo SET last_update = ?, update_quantity = update_quantity + 1 WHERE id = ?", (now, sheet_id))
            result = "üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ"
        elif action == "clear":
            cursor.execute("UPDATE SheetsInfo SET scan_failures = 0, update_failures = 0 WHERE id = ?", (sheet_id,))
            result = "üßπ –û—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã"
        else:
            result = "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        conn.commit()
    except Exception as e:
        result = f"‚ùå –û—à–∏–±–∫–∞: {e}"
    finally:
        conn.close()

    await query.answer(result)
    await update_sheet_view(query, state)

@router.callback_query(F.data == "back:sheets")
async def back_sheets_menu(query: CallbackQuery, state: FSMContext):
    await state.set_state(MenuStates.SHEETS_MENU)
    return await handle_sheets_menu(query, state)

# === üß© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏ (Rotations) ===
async def update_task_view(query: CallbackQuery, task_id: str):
    task = get_task_by_id(task_id)
    if not task:
        return await query.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    scan_ok = max(0, task['scan_quantity'] - task['scan_failures'])
    update_ok = max(0, task['update_quantity'] - task['update_failures'])

    text = (
        f"<b>üìÑ –ü—Ä–æ—Ü–µ—Å—Å:</b> {task['name']}\n"
        f"<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫:</b> {task['source']}\n"
        f"<b>üßÆ –•–µ—à:</b> <code>{task['hash']}</code>\n"
        f"<b>üïì –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {task['scan_interval']} —Å–µ–∫\n\n"
        f"<b>üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {format_datetime_pl(task['last_scan'])}\n"
        f"–í—Å–µ–≥–æ: {task['scan_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {scan_ok} | ‚ùå –û—à–∏–±–∫–∏: {task['scan_failures']}\n\n"
        f"<b>üì§ –í—Å—Ç–∞–≤–∫–∞</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è: {format_datetime_pl(task['last_update'])}\n"
        f"–í—Å–µ–≥–æ: {task['update_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {update_ok} | ‚ùå –û—à–∏–±–∫–∏: {task['update_failures']}"
    )

    if task["scan_failures"] > 0 or task["update_failures"] > 0:
        text += "\n\n<b>üßæ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n<i>üîç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥</i>"

    try:
        await query.message.edit_text(text, reply_markup=scanner_log_kb("task", "rotations"))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await query.answer("‚ö†Ô∏è –£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", show_alert=False)
        elif "message to edit not found" in str(e):
            await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        else:
            raise

# === üß© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏ (Sheets) ===
async def update_sheet_view(query: CallbackQuery, sheet_id: str):
    task = get_sheet_by_id(sheet_id)
    if not task:
        return await query.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    scan_ok = max(0, task['scan_quantity'] - task['scan_failures'])
    update_ok = max(0, task['update_quantity'] - task['update_failures'])

    text = (
        f"<b>üìÑ –ü—Ä–æ—Ü–µ—Å—Å:</b> {task['name']}\n"
        f"<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫:</b> {task['source']}\n"
        f"<b>üßÆ –•–µ—à:</b> <code>{task['hash']}</code>\n"
        f"<b>üïì –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {task['scan_interval']} —Å–µ–∫\n\n"
        f"<b>üîÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {format_datetime_pl(task['last_scan'])}\n"
        f"–í—Å–µ–≥–æ: {task['scan_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {scan_ok} | ‚ùå –û—à–∏–±–∫–∏: {task['scan_failures']}\n\n"
        f"<b>üì§ –í—Å—Ç–∞–≤–∫–∞</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è: {format_datetime_pl(task['last_update'])}\n"
        f"–í—Å–µ–≥–æ: {task['update_quantity']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {update_ok} | ‚ùå –û—à–∏–±–∫–∏: {task['update_failures']}"
    )

    if task["scan_failures"] > 0 or task["update_failures"] > 0:
        text += "\n\n<b>üßæ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n<i>üîç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥</i>"

    try:
        await query.message.edit_text(text, reply_markup=scanner_log_kb("task", "sheets"))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await query.answer("‚ö†Ô∏è –£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", show_alert=False)
        elif "message to edit not found" in str(e):
            await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        else:
            raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ
def get_tracked_tables_by_month(month: int, year: int):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT table_type, label, spreadsheet_id, valid_from, valid_to FROM TrackedTables")
    rows = cursor.fetchall()
    conn.close()

    target = datetime(year, month, 1)
    current_month = []
    for row in rows:
        table_type, label, spreadsheet_id, valid_from, valid_to = row
        if not valid_from or not valid_to:
            continue  # –ë–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        valid_from_dt = datetime.strptime(valid_from, "%d.%m.%Y")
        valid_to_dt = datetime.strptime(valid_to, "%d.%m.%Y")

        if valid_from_dt <= target <= valid_to_dt:
            current_month.append({
                "table_type": table_type,
                "label": label,
                "spreadsheet_id": spreadsheet_id,
                "valid_from": valid_from,
                "valid_to": valid_to,
                "status": "‚úÖ" if spreadsheet_id else "‚ùå"
            })

    expected_types = get_all_table_types()
    table_map = {entry['table_type']: entry for entry in current_month}

    full_result = []
    for t_type in expected_types:
        entry = table_map.get(t_type)
        if entry:
            full_result.append(entry)
        else:
            full_result.append({
                "table_type": t_type,
                "label": t_type.upper(),
                "spreadsheet_id": None,
                "valid_from": None,
                "valid_to": None,
                "status": "‚ùå"
            })
    return full_result

@router.callback_query(F.data == "tracked")
async def handle_tracked_tables(query: CallbackQuery, state: FSMContext):
    now = datetime.now(ZoneInfo(TIMEZONE))
    await state.update_data(month=now.month, year=now.year)
    await show_tracked_tables(query, state)

@router.callback_query(F.data == "tracked:month")
async def change_tracked_month(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    month = data.get("month")
    year = data.get("year")

    next_month = month + 1
    next_year = year
    if next_month > 12:
        next_month = 1
        next_year += 1

    await state.update_data(month=next_month, year=next_year)

    tables = get_tracked_tables_by_month(next_month, next_year)
    if any(t['status'] == "‚ùå" for t in tables):
        await query.answer("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —à–∞–±–ª–æ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –µ—â—ë –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.", show_alert=True)

    await show_tracked_tables(query, state)

async def show_tracked_tables(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    month = data.get("month")
    year = data.get("year")

    tables = get_tracked_tables_by_month(month, year)
    now = datetime.now(ZoneInfo(TIMEZONE))
    time_str = now.strftime("%d.%m.%Y %H:%M")
    shift = "Day shift" if 6 <= now.hour < 18 else "Night shift"

    display_month = datetime(year, month, 1).strftime("%B %Y").capitalize()

    lines = [
        f"üïí {shift} {time_str}",
        f"üì¶ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ {display_month}",
        "",
        "<b>üìå –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>"
    ]
    for t in tables:
        lines.append(f"{t['status']} <b>{t['label']}</b> ‚Äî <code>{t['spreadsheet_id'] or '‚Äî'}</code>")
    text = "\n".join(lines)

    buttons = []
    row = []
    for t in tables:
        row.append(InlineKeyboardButton(text=f"{t['status']} {t['label']}", callback_data=f"doc:{t['table_type']}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    if any(t['status'] == '‚ùå' for t in tables):
        buttons.insert(-1, [InlineKeyboardButton(text="‚ûï –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data="prepare:templates")])

    buttons.append([
        InlineKeyboardButton(text="üìÖ –°–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü", callback_data="tracked:month"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back:main")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.edit_text(text, reply_markup=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —Ç–∏–ø—É —Ç–∞–±–ª–∏—Ü—ã
def get_all_table_types():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT table_type FROM TrackedTables")
    types = [row[0] for row in cursor.fetchall()]
    conn.close()
    return types

@router.callback_query(F.data == "prepare:templates")
async def handle_prepare_templates(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    month = data.get("month")
    year = data.get("year")

    table_types = get_all_table_types()
    existing = get_tracked_tables_by_month(month, year)
    existing_types = [e["table_type"] for e in existing if e["spreadsheet_id"]]

    to_create = [t for t in table_types if t not in existing_types]
    if not to_create:
        return await query.answer("‚úÖ –í—Å–µ —à–∞–±–ª–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å", show_alert=True)

    from calendar import monthrange
    valid_from = f"01.{month:02d}.{year}"
    valid_to = f"{monthrange(year, month)[1]:02d}.{month:02d}.{year}"

    conn = get_connection()
    cursor = conn.cursor()
    for table_type in to_create:
        cursor.execute(
            "INSERT INTO TrackedTables (table_type, label, spreadsheet_id, valid_from, valid_to) VALUES (?, ?, ?, ?, ?)",
            (table_type, table_type.upper(), '', valid_from, valid_to)
        )
    conn.commit()
    conn.close()

    await query.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã {len(to_create)} —à–∞–±–ª–æ–Ω–æ–≤")
    await show_tracked_tables(query, state)

@router.callback_query(F.data.startswith("toggle:"))
async def toggle_scanner(query: CallbackQuery):
    scanner_type = query.data.split(":")[1]
    key = f"{scanner_type}_scanner"

    current_status = is_scanner_enabled(key)
    set_scanner_enabled(key, not current_status)

    await query.answer(
        f"{'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if not current_status else '‚õî –í—ã–∫–ª—é—á–µ–Ω–æ'}: {scanner_type.capitalize()}"
    )

    await query.message.edit_text(
        generate_main_menu_text(),
        reply_markup=main_menu_kb()
    )

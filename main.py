# main.py

import threading
import time
import signal
import sys
from rotationsinfo_scanner import RotationsInfoScanner
from sheetsinfo_scanner import SheetsInfoScanner
from database import connect_to_db
from data import return_tracked_tables
from utils import load_credentials, build_doc_id_map
from logger import log_to_file  # –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ
from config import DB_PATH, MAIN_LOG

stop_event = threading.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤

def start_rotations_scanner(conn, service, doc_id_map):
    while not stop_event.is_set():
        try:
            scanner = RotationsInfoScanner(conn, service, doc_id_map)
            scanner.run()
        except Exception as e:
            log_to_file(MAIN_LOG, f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ RotationsInfoScanner: {e}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

def start_sheets_scanner(conn, service, doc_id_map):
    while not stop_event.is_set():
        try:
            scanner = SheetsInfoScanner(conn, service, doc_id_map)
            scanner.run()
        except Exception as e:
            log_to_file(MAIN_LOG, f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ SheetsInfoScanner: {e}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

def signal_handler(sig, frame):
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    log_to_file(MAIN_LOG, "üõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    stop_event.set()
    sys.exit(0)

def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞...")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ Google Sheets
    conn = connect_to_db(DB_PATH)
    service = load_credentials()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    doc_id_map = build_doc_id_map(return_tracked_tables(conn))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

    thread_rotations = threading.Thread(target=start_rotations_scanner, args=(conn, service, doc_id_map), daemon=True)
    # thread_sheets = threading.Thread(target=start_sheets_scanner, args=(conn, service, doc_id_map), daemon=True)

    thread_rotations.start()
    # thread_sheets.start()

    while not stop_event.is_set():
        time.sleep(1)  # –ü—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º

    print("‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

if __name__ == "__main__":
    main()

# main.py

import threading
import time
import signal
import sys
import logging
import asyncio
import platform

from rotationsinfo_scanner import RotationsInfoScanner
from sheetsinfo_scanner import SheetsInfoScanner
from database import connect_to_db
from data import return_tracked_tables
from utils import load_credentials, build_doc_id_map
from logger import log_to_file
from config import DB_PATH, MAIN_LOG, BOT_TOKEN

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import menu

# ‚¨áÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è Windows
if platform.system() == "Windows":
    import winloop
    winloop.install()

stop_event = threading.Event()
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

async def main_bot():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_routers(menu.router)

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

def start_rotations_scanner(conn, service, doc_id_map):
    while not stop_event.is_set():
        try:
            scanner = RotationsInfoScanner(conn, service, doc_id_map)
            scanner.run()
        except Exception as e:
            log_to_file(MAIN_LOG, f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ RotationsInfoScanner: {e}")
            time.sleep(5)

def start_sheets_scanner(conn, service, doc_id_map):
    while not stop_event.is_set():
        try:
            scanner = SheetsInfoScanner(conn, service, doc_id_map)
            scanner.run()
        except Exception as e:
            log_to_file(MAIN_LOG, f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ SheetsInfoScanner: {e}")
            time.sleep(5)

def signal_handler(sig, frame):
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    log_to_file(MAIN_LOG, "üõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    stop_event.set()
    sys.exit(0)

def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞...")

    conn = connect_to_db(DB_PATH)
    service = load_credentials()
    doc_id_map = build_doc_id_map(return_tracked_tables(conn))

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # thread_rotations = threading.Thread(target=start_rotations_scanner, args=(conn, service, doc_id_map), daemon=True)
    thread_sheets = threading.Thread(target=start_sheets_scanner, args=(conn, service, doc_id_map), daemon=True)

    # thread_rotations.start()
    thread_sheets.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å, –ø–æ–∫–∞ stop_event –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    while not stop_event.is_set():
        time.sleep(1)

if __name__ == "__main__":
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    asyncio.run(main_bot())
    main()
    # –ò–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –ø–æ—Ç–æ–∫–∏, –∏ –±–æ—Ç–∞ ‚Äî –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ª–æ–≥–∏–∫–∏

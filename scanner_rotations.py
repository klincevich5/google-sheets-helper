import time
from database import get_pending_scans, update_last_scan, log_scan_groups, get_doc_id_map
from logger import log_to_file
from utils import build_batchget_ranges, fetch_batch_values
from methods import get_range_by_method
from config import ROTATIONS_LOG_FILE, SCAN_INTERVAL_SECONDS, WARSAW_TZ
from datetime import datetime

def scan_process(process):
    log_to_file(ROTATIONS_LOG_FILE, f"üîç –°–∫–∞–Ω: ID={process['id']} ‚Äî {process['name_of_process']}")
    time.sleep(1)  # –∑–∞–≥–ª—É—à–∫–∞
    update_last_scan("RotationsInfo", process["id"])
    log_to_file(ROTATIONS_LOG_FILE, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ID={process['id']}")

def RotationsInfo_scanner():
    log_to_file(ROTATIONS_LOG_FILE, "üü¢ RotationsInfo_scanner –∑–∞–ø—É—â–µ–Ω.")
    log_scan_groups("RotationsInfo", ROTATIONS_LOG_FILE, group_field="scan_group")
    
    doc_id_map = get_doc_id_map()
    log_to_file(ROTATIONS_LOG_FILE, f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(doc_id_map)} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    if not doc_id_map:
        log_to_file(ROTATIONS_LOG_FILE, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    while True:
        log_to_file(ROTATIONS_LOG_FILE, "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á...")
        tasks = get_pending_scans("SheetsInfo")

        if not tasks:
            log_to_file(ROTATIONS_LOG_FILE, f"‚è≥ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ {datetime.now(WARSAW_TZ).strftime('%H:%M:%S')}")
            time.sleep(SCAN_INTERVAL_SECONDS)
            continue

        # 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ spreadsheet_id
        doc_to_tasks = {}
        for task in tasks:
            doc_id = doc_id_map.get(task["source_table_type"])
            if not doc_id:
                log_to_file(ROTATIONS_LOG_FILE, f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ doc_id: ID={task['id']}")
                continue

            log_to_file(ROTATIONS_LOG_FILE, f"üì¶ ID={task['id']} | üÜî {doc_id} | üìë {task['source_page_name']} | ‚öô {task['get_data_method']}")
            if doc_id:
                doc_to_tasks.setdefault(doc_id, []).append(task)

        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        for doc_id, task_list in doc_to_tasks.items():
            log_to_file(ROTATIONS_LOG_FILE, f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ID={doc_id} —Å {len(task_list)} –∑–∞–¥–∞—á–∞–º–∏"    )
            batch_ranges = build_batchget_ranges(task_list, ROTATIONS_LOG_FILE).get(doc_id, set())
            if not batch_ranges:
                log_to_file(ROTATIONS_LOG_FILE, f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ ID={doc_id} ‚Äî –Ω–µ—Ç ranges")
                continue

            log_to_file(ROTATIONS_LOG_FILE, f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è batchGet –¥–ª—è ID={doc_id}, –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {len(batch_ranges)}")
            values_map = fetch_batch_values(doc_id, list(batch_ranges))
            log_to_file(ROTATIONS_LOG_FILE, f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(values_map)} —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç ID={doc_id}")

            for row in task_list:
                log_to_file(ROTATIONS_LOG_FILE, f"üì¶ ID={row['id']} | üÜî {doc_id} | üìë {row['source_page_name']} | ‚öô {row['get_data_method']}")
                page = row["source_page_name"]
                area = row["source_page_area"]
                method = row["get_data_method"]
                process_id = row["id"]

                values = values_map.get(page, [])
                actual_range, error = get_range_by_method(method, page, area, values)

                if actual_range:
                    log_to_file(ROTATIONS_LOG_FILE, f"üì• ID={process_id} ‚Üí –∑–æ–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {actual_range}")
                    scan_process(row)
                    update_last_scan("SheetsInfo", process_id)
                else:
                    log_to_file(ROTATIONS_LOG_FILE, f"‚ö†Ô∏è ID={process_id} –æ—à–∏–±–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {error}")

        time.sleep(SCAN_INTERVAL_SECONDS)

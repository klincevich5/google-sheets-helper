# scanners/monitoring_storage_scanner.py

from sqlalchemy import select
import re
import time
from datetime import datetime, timedelta
from core.config import MONITORING_LOG
from collections import defaultdict
from utils.logger import (
    log_to_file,
    log_separator,
    log_section
)
from utils.utils import (
    batch_get,
    batch_update
)
from database.db_models import (
    MonitoringStorage,
    RotationsInfo,
    FeedbackStorage,
    MistakeStorage,
    SheetsInfo
)
from core.monitoring_storage_model import MonitoringStorageTask

################################################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–ª–µ—Ä–µ
################################################################################################

def pretty_print_dealer_info(info):
    log_to_file(MONITORING_LOG, f"\n{'=' * 50}")
    log_to_file(MONITORING_LOG, f"üë§ –î–∏–ª–µ—Ä: {info['dealer_name']} {'(' + ', '.join(info['dealer_nicknames']) + ')' if info['dealer_nicknames'] else ''}")
    log_to_file(MONITORING_LOG, f"üìÖ –î–∞—Ç–∞ —Å–º–µ–Ω—ã: {info['report_date'].strftime('%Y-%m-%d')}")
    log_to_file(MONITORING_LOG, f"‚è∞ –°–º–µ–Ω–∞: {info['shift_type']} ({info['shift_start'].strftime('%H:%M')} ‚Äì {info['shift_end'].strftime('%H:%M')})")

    # –°—Ç–∞—Ç—É—Å—ã —Å–º–µ–Ω—ã
    log_to_file(MONITORING_LOG, "\nüìå –°—Ç–∞—Ç—É—Å—ã:")
    log_to_file(MONITORING_LOG, f"  - –ù–∞–∑–Ω–∞—á–µ–Ω–∞: {'‚úÖ' if info['is_scheduled'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –î–æ–ø. —Å–º–µ–Ω–∞: {'‚úÖ' if info['is_additional'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –≠–∫—Å—Ç—Ä–∞ —Å–º–µ–Ω–∞: {'‚úÖ' if info['is_extra'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –ë–æ–ª—å–Ω–∏—á–Ω—ã–π: {'‚úÖ' if info['is_sickleave'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –û—Ç–ø—É—Å–∫: {'‚úÖ' if info['is_vacation'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –ù–µ –ø—Ä–∏—à—ë–ª: {'‚úÖ' if info['is_did_not_come'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –£—à—ë–ª —Å–æ —Å–º–µ–Ω—ã: {'‚úÖ' if info['is_left_the_shift'] else '‚ùå'}")

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–∂–∏
    log_to_file(MONITORING_LOG, "\nüè¢ –î–æ—Å—Ç—É–ø –∫ —ç—Ç–∞–∂–∞–º:")
    for floor in ["VIP", "TURKISH", "GENERIC", "GSBJ", "LEGENDZ"]:
        allowed = info['floor_permits'].get(floor, '‚ùì')
        if isinstance(allowed, str) and (allowed.startswith('[FLOOR_PERMITS ERROR]') or allowed.startswith('[FLOOR_PERMITS WARNING]')):
            log_to_file(MONITORING_LOG, f"  - {floor}: {allowed}")
        else:
            log_to_file(MONITORING_LOG, f"  - {floor}: {'‚úÖ' if allowed is True else '‚ùå'}")

    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã (–∂—ë—Å—Ç–∫–æ –ø–æ —Å–ø–∏—Å–∫—É)
    log_to_file(MONITORING_LOG, "\nüé≤ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã:")
    games = ["Male", "BJ", "BC", "RL", "DT", "HSB", "swBJ", "swBC", "swRL", "SH"]
    for game in games:
        allowed = info['game_permits'].get(game, '‚ùì')
        if isinstance(allowed, str) and (allowed.startswith('[GAME_PERMITS ERROR]') or allowed.startswith('[GAME_PERMITS WARNING]') or allowed == 'NOT FOUND'):
            log_to_file(MONITORING_LOG, f"  - {game}: {allowed}")
        elif game == "SH":
            # SH ‚Äî –≤—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ None –∏–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤—ã–≤–æ–¥–∏–º '‚ùå', –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
            if allowed is None or allowed == '':
                log_to_file(MONITORING_LOG, f"  - {game}: ‚ùå")
            else:
                log_to_file(MONITORING_LOG, f"  - {game}: {allowed}")
        else:
            log_to_file(MONITORING_LOG, f"  - {game}: {'‚úÖ' if allowed is True else '‚ùå'}")

    # –û—à–∏–±–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    log_to_file(MONITORING_LOG, "\nüö® –û—à–∏–±–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:")
    log_to_file(MONITORING_LOG, f"  - –û—à–∏–±–∫–∏: {'‚úÖ' if info['has_mistakes'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"  - –§–∏–¥–±—ç–∫–∏: {'‚úÖ' if info['has_feedbacks'] else '‚ùå'}")
    log_to_file(MONITORING_LOG, f"{'=' * 50}\n")

#################################################################################################
# MonitoringStorageScanner
#################################################################################################

class MonitoringStorageScanner:
    def __init__(self, session, monitoring_tokens, doc_id_map):
        self.session = session
        self.doc_id_map = doc_id_map
        self.date = datetime.now().date()
        log_to_file(MONITORING_LOG, f"üåÄ –î–∞—Ç–∞: {self.date}")

        # --- Bulk load all needed data into memory for fast access ---
        import json
        from core.config import FLOORS as FLOORS_DICT, ROTATION_ORDER
        self.FLOORS_DICT = FLOORS_DICT
        self.ROTATION_ORDER = ROTATION_ORDER
        related_month = self.date.replace(day=1)

        # 1. Floor lists (permits) ‚Äî –∏–º–µ–Ω–∞ –±–µ–∑ lower()
        self.floor_lists = {}
        for floor in FLOORS_DICT.keys():
            process_name = f"Floor list {floor}"
            sheets_row = self.session.query(SheetsInfo).filter_by(
                name_of_process=process_name,
                related_month=related_month
            ).first()
            names_set = set()
            if sheets_row and sheets_row.values_json:
                values = sheets_row.values_json
                if isinstance(values, str):
                    values = json.loads(values)
                for row in values:
                    if isinstance(row, str):
                        full_entry = row.strip()
                    elif isinstance(row, list) and row and isinstance(row[0], str):
                        full_entry = row[0].strip()
                    else:
                        continue
                    if full_entry:
                        names_set.add(full_entry)
            self.floor_lists[floor] = names_set

        # 2. Game permits (permits by floor) ‚Äî –∏–º–µ–Ω–∞ –±–µ–∑ lower()
        self.game_permits = {}
        for floor in FLOORS_DICT.keys():
            process_name = f"Permits {floor}"
            sheets_row = self.session.query(SheetsInfo).filter_by(
                name_of_process=process_name,
                related_month=related_month
            ).first()
            floor_permits = {}
            if sheets_row and sheets_row.values_json:
                values = sheets_row.values_json
                if isinstance(values, str):
                    values = json.loads(values)
                if values and len(values) >= 3:
                    headers = values[0]
                    for row in values[2:]:
                        if not row or not row[0]:
                            continue
                        name = row[0].strip()
                        permits = {headers[i]: (row[i].strip().title() if headers[i]=="SH" else (row[i].strip().upper()=="TRUE"))
                                   for i in range(1, min(len(headers), len(row)))}
                        floor_permits[name] = permits
            self.game_permits[floor] = floor_permits

        # 3. Mistakes (by (dealer, date) tuple)
        self.mistakes_by_dealer_date = defaultdict(list)
        for entry in self.session.query(MistakeStorage).filter_by(date=self.date).all():
            self.mistakes_by_dealer_date[(entry.dealer, self.date)].append(entry)

        # 4. Feedbacks (by (dealer, date) tuple)
        self.feedbacks_by_dealer_date = defaultdict(list)
        for entry in self.session.query(FeedbackStorage).filter_by(date=self.date).all():
            self.feedbacks_by_dealer_date[(entry.gp_name_surname, self.date)].append(entry)

        # 5. Rotations (by (floor, date) tuple)
        self.rotations_by_floor_date = defaultdict(list)
        for rot in self.session.query(RotationsInfo).filter(
            RotationsInfo.related_month == self.date,
            RotationsInfo.name_of_process.in_(ROTATION_ORDER)
        ).all():
            floor = rot.source_page_name
            values = []
            try:
                values = json.loads(rot.values_json) if rot.values_json else []
            except Exception:
                values = []
            self.rotations_by_floor_date[(floor, self.date)].append(values)

    def run(self):
        log_to_file(MONITORING_LOG, f"üåÄ –ó–∞–ø—É—Å–∫ MonitoringStorageScanner –Ω–∞ {self.date}")

        import time as _time
        dealers = self._get_all_dealers()
        for idx, (dealer_name, nicknames) in enumerate(dealers, 1):
            try:
                t0 = _time.time()
                log_to_file(MONITORING_LOG, f"\nüåÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–ª–µ—Ä–∞ {idx}/{len(dealers)}: {dealer_name} —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏: {nicknames}\n")
                data = self._build_json(dealer_name, nicknames)
                t1 = _time.time()
                log_to_file(MONITORING_LOG, f"\nüåÄ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {dealer_name} (–ø–æ–∏—Å–∫ –∑–∞–Ω—è–ª {t1-t0:.3f} —Å–µ–∫):")
                task = MonitoringStorageTask(self._convert_to_task_dict(dealer_name, nicknames, data))
                # pretty_print_dealer_info(task.__dict__)
                self._save(task)
            except Exception as e:
                log_to_file(MONITORING_LOG, f"‚ö† –û—à–∏–±–∫–∞ –¥–ª—è {dealer_name}: {e}")
            # finally:
            #     time.sleep(15)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∏–ª–µ—Ä–æ–≤
    

    def _convert_to_task_dict(self, dealer_name, nicknames, data):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç _build_json –≤ dict –¥–ª—è MonitoringStorageTask
        shift = data["shifts"][0] if data.get("shifts") else {}
        return {
            "dealer_name": dealer_name,
            "dealer_nicknames": nicknames,
            "report_date": self.date,
            "shift_type": shift.get("type"),
            "shift_start": shift.get("start"),
            "shift_end": shift.get("end"),
            "break_number": 0,
            "is_scheduled": shift.get("is_scheduled", False),
            "is_additional": shift.get("is_additional", False),
            "is_extra": shift.get("is_extra", False),
            "is_sickleave": shift.get("is_sickleave", False),
            "is_vacation": shift.get("is_vacation", False),
            "is_did_not_come": shift.get("is_did_not_come", False),
            "is_left_the_shift": shift.get("is_left_the_shift", False),
            "assigned_floors": shift.get("assigned_floors", []),
            "floor_permits": data["permits"]["floors"] if data.get("permits") else {},
            "game_permits": data["permits"]["games"] if data.get("permits") else {},
            "has_mistakes": bool(data.get("mistakes")),
            "has_feedbacks": bool(data.get("feedbacks")),
            "rotation": shift.get("rotation", []),
            "mistakes": data.get("mistakes", []),
            "feedbacks": data.get("feedbacks", []),
            "raw_data": data,
        }

##################################################################################################
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–∏–ª–µ—Ä–æ–≤ –∏–∑ SheetsInfo (Bonus BS live88)
####################################################################################################

    def _get_all_dealers(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ—Ö –¥–∏–ª–µ—Ä–æ–≤ –∏–∑ SheetsInfo (Bonus BS live88),
        –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –Ω–∏–∫–Ω–µ–π–º—ã –æ–¥–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [(dealer_name, [nickname1, nickname2, ...])]
        """
        rows = self.session.execute(
            select(SheetsInfo.values_json).where(
                SheetsInfo.name_of_process == "Bonus BS live88"
            )
        ).scalars().all()

        dealer_map = defaultdict(set)  # dealer_name -> set(nicknames)

        for values_json in rows:
            # –ï—Å–ª–∏ values_json ‚Äî —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ JSON
            if isinstance(values_json, str):
                import json
                values_json = json.loads(values_json)
            for row in values_json:
                # row –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º
                if isinstance(row, str):
                    full_entry = row.strip()
                elif isinstance(row, list) and row and isinstance(row[0], str):
                    full_entry = row[0].strip()
                else:
                    continue  # –ø—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                if not full_entry:
                    continue
                match = re.match(r"^(.*?)\s*\((.+?)\)$", full_entry)
                if match:
                    dealer_name = match.group(1).strip()
                    nickname = match.group(2).strip()
                    dealer_map[dealer_name].add(nickname)
                else:
                    dealer_name = full_entry
                    dealer_map[dealer_name]  # —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –ø—É—Å—Ç—ã–º set()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
        return [(name, list(nicks)) for name, nicks in dealer_map.items() if name]

###################################################################################################
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä JSON –¥–ª—è –¥–∏–ª–µ—Ä–∞
###################################################################################################

    def _build_json(self, dealer, nicknames):
        return {
            "date": str(self.date),
            "dealer": {
                "full_name": dealer,
                "nickname": nicknames
            },
            "permits": {
                "floors": self._get_floor_permits(dealer),
                "games": self._get_game_permits(dealer)
            },
            "shifts": [self._get_shift_info(dealer)],
            "feedbacks": self._get_feedbacks(dealer),
            "mistakes": self._get_mistakes(f"{dealer} ({nicknames[0]})") 
        }
    
    def _get_floor_permits(self, dealer_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ –≤—Å–µ–º —ç—Ç–∞–∂–∞–º: {"VIP": True/False/str, ...}
        –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å–∞.
        """
        result = {}
        found_any = False
        for floor in ["VIP", "TURKISH", "GENERIC", "GSBJ", "LEGENDZ"]:
            try:
                found = dealer_name in self.floor_lists.get(floor, set())
                result[floor] = found
                marker = "‚úÖ" if found else "‚ùå"
                log_to_file(MONITORING_LOG, f"[FLOOR_PERMITS] {marker} {dealer_name} –Ω–∞ {floor}")
                if found:
                    found_any = True
            except Exception as e:
                error_msg = f"[FLOOR_PERMITS ERROR] {dealer_name} / {floor}: {e}"
                log_to_file(MONITORING_LOG, error_msg)
                result[floor] = error_msg
        if not found_any:
            log_to_file(MONITORING_LOG, f"[FLOOR_PERMITS WARNING] üö´ –ò–º—è '{dealer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º floor_list! –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏–º–µ–Ω–∏.")
        return result

    def _get_game_permits(self, dealer_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º: {"Male": bool/str, ..., "SH": str/None}
        –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å–∞.
        """
        games = ["Male", "BJ", "BC", "RL", "DT", "HSB", "swBJ", "swBC", "swRL", "SH"]
        result = {game: None for game in games}
        found = False
        error_msg = None
        for floor in ["VIP", "TURKISH", "GENERIC", "GSBJ", "LEGENDZ"]:
            try:
                floor_permits = self.game_permits.get(floor, {})
                if dealer_name in floor_permits:
                    permits = floor_permits[dealer_name]
                    for game in games:
                        if game == "SH":
                            val = permits.get(game)
                            result[game] = val if isinstance(val, str) and val else '‚ùå'
                        else:
                            val = permits.get(game)
                            result[game] = True if val is True else False
                    found = True
                    log_to_file(MONITORING_LOG, f"[GAME_PERMITS] ‚úÖ {dealer_name} –Ω–∞–π–¥–µ–Ω –≤ {floor}")
                    break
                else:
                    log_to_file(MONITORING_LOG, f"[GAME_PERMITS] ‚ùå {dealer_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {floor}")
            except Exception as e:
                error_msg = f"[GAME_PERMITS ERROR] {dealer_name} / {floor}: {e}"
                log_to_file(MONITORING_LOG, error_msg)
        if not found:
            for game in games:
                result[game] = error_msg or '‚ùå' if game != 'SH' else '‚ùå'
            log_to_file(MONITORING_LOG, f"[GAME_PERMITS WARNING] üö´ –ò–º—è '{dealer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º game_permits! –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏–º–µ–Ω–∏.")
        return result

    def _get_mistakes(self, dealer):
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –ø–æ in-memory self.mistakes_by_dealer.
        –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–∏—à–µ—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥.
        """
        try:
            entries = self.mistakes_by_dealer_date.get((dealer, self.date), [])
        except Exception as e:
            log_to_file(MONITORING_LOG, f"[MISTAKES ERROR] {dealer}: {e}")
            entries = []
        if not entries:
            log_to_file(MONITORING_LOG, f"[MISTAKES WARNING] –ò–º—è '{dealer}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ mistakes! –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏–º–µ–Ω–∏.")
        table_map = {}
        for entry in entries:
            table = entry.table_name
            if table not in table_map:
                table_map[table] = []
            table_map[table].append({
                "time": entry.time.strftime("%H:%M") if entry.time else None,
                "issue": entry.mistake
            })
        return [
            {"table": table, "entries": ents} for table, ents in table_map.items()
        ]

    def _get_feedbacks(self, dealer):
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–¥–±–µ–∫–æ–≤ –ø–æ in-memory self.feedbacks_by_dealer.
        –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–∏—à–µ—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥.
        """
        try:
            entries = self.feedbacks_by_dealer_date.get((dealer, self.date), [])
        except Exception as e:
            log_to_file(MONITORING_LOG, f"[FEEDBACKS ERROR] {dealer}: {e}")
            entries = []
        if not entries:
            log_to_file(MONITORING_LOG, f"[FEEDBACKS WARNING] –ò–º—è '{dealer}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ feedbacks! –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏–º–µ–Ω–∏.")
        result = []
        for entry in entries:
            result.append({
                "id": str(entry.id),
                "topic": entry.reason,
                "floor": entry.floor,
                "game_type": entry.game,
                "reported_by": entry.sm_name_surname,
                "comment": entry.explanation_of_the_reason,
                "is_proof": bool(entry.proof) if hasattr(entry, 'proof') else False,
                "action_taken": entry.action_taken,
                "forwarded_by": entry.forwarded_feedback,
                "after_forward_comment": entry.comment_after_forwarding
            })
        return result

    def _get_shift_info(self, dealer):
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ä–æ—Ç–∞—Ü–∏–π –ø–æ in-memory self.rotations_by_floor.
        """
        assigned_floors = []
        floor_rotations = {}
        for floor, all_rotations in self.rotations_by_floor_date.items():
            for values in all_rotations:
                found = False
                for row in values:
                    if isinstance(row, list) and dealer in row:
                        found = True
                        break
                    if isinstance(row, dict) and dealer in row.values():
                        found = True
                        break
                if found:
                    assigned_floors.append(floor)
                    floor_rotations[floor] = values
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 12 —á–∞—Å–æ–≤ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
        def build_schedule(floor, values):
            schedule = []
            from datetime import datetime, timedelta
            start_time = datetime.strptime("09:00", "%H:%M")
            for i in range(24):
                t = (start_time + timedelta(minutes=30*i)).strftime("%H:%M")
                table = ""
                for row in values:
                    if isinstance(row, dict) and row.get("time") == t and row.get("dealer") == dealer:
                        table = row.get("table", "")
                        break
                    if isinstance(row, list) and len(row) >= 3 and row[0] == t and row[1] == dealer:
                        table = row[2]
                        break
                schedule.append({"time": t, "table": table})
            return schedule
        rotation = []
        for floor, values in floor_rotations.items():
            rotation.append({
                "floor": floor,
                "schedule": build_schedule(floor, values)
            })
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–º–µ–Ω—ã –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ day/night –∏–∑ scan_all_shifts_for_month)
        shift_type = getattr(self, 'current_shift_type', None) or "Day"
        start = getattr(self, 'current_shift_start', None) or "09:00"
        end = getattr(self, 'current_shift_end', None) or "21:00"
        extra_flags = {
            "is_scheduled": True,
            "is_additional": False,
            "is_extra": False,
            "is_sickleave": False,
            "is_vacation": False,
            "is_did_not_come": False,
            "is_left_the_shift": False
        }
        if shift_type == "Night":
            start = "21:00"
            end = "09:00"
        else:
            start = "09:00"
            end = "21:00"
        return {
            "type": shift_type,
            **extra_flags,
            "start": start,
            "end": end,
            "assigned_floors": assigned_floors,
            "rotation": rotation
        }
    

    def _save(self, task):
        entry = self.session.query(MonitoringStorage).filter_by(
            dealer_name=task.dealer_name, report_date=task.report_date
        ).first()

        if entry:
            entry.raw_data = task.raw_data
            entry.dealer_nicknames = task.dealer_nicknames
            entry.shift_type = task.shift_type
            entry.shift_start = task.shift_start
            entry.shift_end = task.shift_end
            entry.break_number = task.break_number
            entry.is_scheduled = task.is_scheduled
            entry.is_additional = task.is_additional
            entry.is_extra = task.is_extra
            entry.is_sickleave = task.is_sickleave
            entry.is_vacation = task.is_vacation
            entry.is_did_not_come = task.is_did_not_come
            entry.is_left_the_shift = task.is_left_the_shift
            entry.assigned_floors = task.assigned_floors
            entry.floor_permits = task.floor_permits
            entry.game_permits = task.game_permits
            entry.has_mistakes = task.has_mistakes
            entry.has_feedbacks = task.has_feedbacks
            entry.rotation = task.rotation
            entry.mistakes = task.mistakes
            entry.feedbacks = task.feedbacks
        else:
            entry = MonitoringStorage(
                dealer_name=task.dealer_name,
                dealer_nicknames=task.dealer_nicknames,
                report_date=task.report_date,
                shift_type=task.shift_type,
                shift_start=task.shift_start,
                shift_end=task.shift_end,
                break_number=task.break_number,
                is_scheduled=task.is_scheduled,
                is_additional=task.is_additional,
                is_extra=task.is_extra,
                is_sickleave=task.is_sickleave,
                is_vacation=task.is_vacation,
                is_did_not_come=task.is_did_not_come,
                is_left_the_shift=task.is_left_the_shift,
                assigned_floors=task.assigned_floors,
                floor_permits=task.floor_permits,
                game_permits=task.game_permits,
                has_mistakes=task.has_mistakes,
                has_feedbacks=task.has_feedbacks,
                rotation=task.rotation,
                mistakes=task.mistakes,
                feedbacks=task.feedbacks,
                raw_data=task.raw_data
            )
            self.session.add(entry)

        self.session.commit()

    def scan_all_shifts_for_month(self):
        """
        –ü—Ä–æ–±–µ–≥–∞–µ—Ç –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º –º–µ—Å—è—Ü–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π (–≤–∫–ª—é—á–∞—è Night shift —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
        –∏ –≤—ã–∑—ã–≤–∞–µ—Ç self.run() –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –∏ —Å–º–µ–Ω—ã.
        """
        today = self.date
        first_day = today.replace(day=1)
        last_day = today
        shift_types = [
            ("Day", "09:00", "21:00"),
            ("Night", "21:00", "09:00")
        ]
        current = first_day
        while current <= last_day:
            for shift_type, shift_start, shift_end in shift_types:
                self.date = current
                self.current_shift_type = shift_type
                self.current_shift_start = shift_start
                self.current_shift_end = shift_end
                log_to_file(MONITORING_LOG, f"\n=== {current} {shift_type} shift ===")
                self.run()
            current += timedelta(days=1)

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é)
    from database.session import SessionLocal
    session = SessionLocal()
    monitoring_tokens = None  # –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    doc_id_map = None        # –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É id
    scanner = MonitoringStorageScanner(session, monitoring_tokens, doc_id_map)

    scanner.scan_all_shifts_for_month()
    print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –≤—Å–µ —Å–º–µ–Ω—ã —Å {scanner.date.replace(day=1)} –ø–æ {scanner.date} (–¥–∞—Ç–∞ –∏ shift –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î)")

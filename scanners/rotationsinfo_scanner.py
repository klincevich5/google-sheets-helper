# rotationsinfo_scanner.py

import os
import time
import json
from collections import defaultdict
from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request

from utils.formatting_utils import build_formatting_requests
from bot.settings_access import is_scanner_enabled
from core.config import ROTATIONSINFO_LOG, ROTATIONSINFO_INTERVAL
from core.data import load_rotationsinfo_tasks
from database.database import insert_usage
from utils.logger import log_to_file, log_separator, log_section
from core.token_manager import TokenManager
from utils.utils import load_credentials

class RotationsInfoScanner:
    def __init__(self, conn, token_map, doc_id_map):
        self.conn = conn
        self.token_map = token_map  # –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ main.py
        self.doc_id_map = doc_id_map
        self.log_file = ROTATIONSINFO_LOG
        self.tasks = []

    def run(self):
        manager = TokenManager(self.token_map)

        while True:
            try:
                if not is_scanner_enabled("rotations_scanner"):
                    log_to_file(self.log_file, "‚è∏ –°–∫–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω (rotations_scanner). –û–∂–∏–¥–∞–Ω–∏–µ...")
                    time.sleep(10)
                    continue
                else:
                    log_to_file(self.log_file, "‚ñ∂Ô∏è –ù–æ–≤—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è RotationsInfo")

                # üîÅ –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
                self.token_name, token_path = manager.select_best_token(self.log_file)
                self.service = load_credentials(token_path, self.log_file)
                log_to_file(self.log_file, f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {self.token_name}")

                try:
                    self.load_tasks()
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")
                    raise

                try:
                    self.scan_phase()
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    raise

                try:
                    self.process_phase()
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    raise

                try:
                    self.update_phase()
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    raise

                time.sleep(60)

            except Exception as e:
                log_separator(self.log_file)
                log_to_file(self.log_file, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(10)

############################################################################################
# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
############################################################################################

    def check_and_refresh_token(self, token_path):
        log_section("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞", self.log_file)

        if not os.path.exists(token_path):
            log_to_file(self.log_file, f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ {token_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            raise FileNotFoundError(f"{token_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        creds = Credentials.from_authorized_user_file(token_path)

        if creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
                with open(token_path, "w", encoding="utf-8") as f:
                    f.write(creds.to_json())

                log_to_file(self.log_file, f"üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {token_path}")

                # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                insert_usage(
                    token=self.token_name,
                    count=1,
                    scan_group="token_refresh",
                    success=True
                )

            except Exception as e:
                log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {token_path}: {e}")

                # ‚ùå –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                insert_usage(
                    token=self.token_name,
                    count=1,
                    scan_group="token_refresh",
                    success=False
                )
                raise
        else:
            log_to_file(self.log_file, f"‚úÖ –¢–æ–∫–µ–Ω {token_path} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")

#############################################################################################
# –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ –ë–î
#############################################################################################

    def load_tasks(self):
        log_section("üß© üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ RotationsInfo", self.log_file)
        self.tasks = load_rotationsinfo_tasks(self.conn)

        if not self.tasks:
            log_section("‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ RotationsInfo.", self.log_file)
            return

        log_section(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tasks)} –∑–∞–¥–∞—á.", self.log_file)
        for task in self.tasks:
            # log_to_file(self.log_file, f"   ‚Ä¢ [Task] {task.source_table_type} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: {task.source_page_name} | –î–∏–∞–ø–∞–∑–æ–Ω: {task.source_page_area}")
            task.assign_doc_ids(self.doc_id_map)

#############################################################################################
# –§–∞–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
#############################################################################################

    def scan_phase(self):
        log_section("üîç –§–∞–∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", self.log_file)

        if not self.tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        ready_tasks = [task for task in self.tasks if task.is_ready_to_scan()]
        if not ready_tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.")
            return

        log_to_file(self.log_file, f"üîé –ù–∞–π–¥–µ–Ω–æ {len(ready_tasks)} –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:")

        scan_groups = defaultdict(list)
        for task in ready_tasks:
            if not task.assign_doc_ids(self.doc_id_map):
                log_to_file(self.log_file, f"‚ö†Ô∏è [Task {task.name_of_process}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å doc_id. –ü—Ä–æ–ø—É—Å–∫.")
                continue
            scan_groups[task.scan_group].append(task)

        for scan_group, group_tasks in scan_groups.items():
            log_separator(self.log_file)
            log_to_file(self.log_file, f"üìò –û–±—Ä–∞–±–æ—Ç–∫–∞ scan_group: {scan_group} ({len(group_tasks)} –∑–∞–¥–∞—á)")

            if not group_tasks:
                log_to_file(self.log_file, "‚ö™ –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                continue

            doc_id = group_tasks[0].source_doc_id
            unique_sheet_names = set(task.source_page_name for task in group_tasks)
            log_to_file(self.log_file, f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤: {unique_sheet_names}")

            exists_map = {}
            for sheet_name in unique_sheet_names:
                exists_map[sheet_name] = self.check_sheet_exists(doc_id, sheet_name)
                log_to_file(self.log_file, f"{'‚úÖ' if exists_map[sheet_name] else '‚ö†Ô∏è'} –õ–∏—Å—Ç '{sheet_name}' {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists_map[sheet_name] else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}.")

            valid_tasks = []
            for task in group_tasks:
                sheet_name = task.source_page_name
                if exists_map.get(sheet_name):
                    log_to_file(self.log_file, f"‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º '{sheet_name}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task.name_of_process}.")
                    valid_tasks.append(task)
                else:
                    log_to_file(self.log_file, f"‚õî –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ {task.name_of_process}: –ª–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    task.update_after_scan(success=False) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ö–ª–∞—Å—Å–µ
                    self.update_task_scan_fields(task) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î

            if not valid_tasks:
                log_to_file(self.log_file, f"‚ö™ –í—Å–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã {scan_group} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ batchGet.")
                continue

            range_to_tasks = defaultdict(list)
            for task in valid_tasks:
                range_str = f"{task.source_page_name}!{task.source_page_area}"
                range_to_tasks[range_str].append(task)

            ranges = list(range_to_tasks.keys())

            log_to_file(self.log_file, "")

            log_to_file(self.log_file, f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ batchGet –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç {task.source_table_type} —Å {len(ranges)} —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏:")
            for r in ranges:
                log_to_file(self.log_file, f"   ‚Ä¢ {r}")

            response_data = self.batch_get(self.service, doc_id, ranges, scan_group, self.log_file)
            if not response_data:
                log_to_file(self.log_file, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç batchGet. –í—Å–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ.")
                for task in valid_tasks:
                    task.update_after_scan(success=False) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ö–ª–∞—Å—Å–µ
                    self.update_task_scan_fields(task) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                continue

            normalized_response = {}
            for k, v in response_data.items():
                clean_key = k.replace("'", "")
                if "!" in clean_key:
                    sheet_name, cells_range = clean_key.split("!", 1)
                    normalized_response[(sheet_name.strip(), cells_range.strip())] = v

            log_to_file(self.log_file, "")
            log_to_file(self.log_file, f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {list(normalized_response.keys())}")

            for task in valid_tasks:
                expected_sheet = task.source_page_name.strip()
                expected_area_start = task.source_page_area.split(":")[0].strip()
                matched_values = None

                for (sheet_name, cells_range), values in normalized_response.items():
                    if sheet_name == expected_sheet and cells_range.startswith(expected_area_start):
                        matched_values = values
                        break

                if matched_values:
                    task.raw_values_json = matched_values #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ raw_values_json
                    task.update_after_scan(success=True) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ö–ª–∞—Å—Å–µ
                    self.update_task_scan_fields(task) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                    log_to_file(self.log_file, f"‚úÖ [Task {task.name_of_process}] –ù–∞–π–¥–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω {sheet_name}!{cells_range}, —Å—Ç—Ä–æ–∫: {len(matched_values)}")
                else:
                    task.update_after_scan(success=False)
                    self.update_task_scan_fields(task)
                    log_to_file(self.log_file, f"‚ö†Ô∏è [Task {task.name_of_process}] –î–∏–∞–ø–∞–∑–æ–Ω {expected_sheet}!{task.source_page_area} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")

    def check_sheet_exists(self, spreadsheet_id, sheet_name):
        try:
            metadata = self.service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
            sheets = metadata.get('sheets', [])
            for sheet in sheets:
                title = sheet.get('properties', {}).get('title')
                if title == sheet_name:
                    return True
            return False
        except Exception as e:
            log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Å—Ç–∞ –≤ {spreadsheet_id}: {e}")
            return False
        
    def update_task_scan_fields(self, task):
        cursor = self.conn.cursor()
        table_name = "RotationsInfo"

        cursor.execute(f"""
            UPDATE {table_name}
            SET
                last_scan = ?,
                scan_quantity = ?,
                scan_failures = ?
            WHERE id = ?
        """, (
            task.last_scan.isoformat() if task.last_scan else None,
            task.scan_quantity,
            task.scan_failures,
            task.id
        ))

        log_to_file(self.log_file, f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –ë–î [Task {task.name_of_process}] ‚Üí proceed={task.proceed} ‚Üí changed={task.changed}, hash={task.hash}")
        self.conn.commit()

    def batch_get(self, service, spreadsheet_id, ranges, scan_group, log_file, retries=5, delay_seconds=5):
        attempt = 0
        success = False

        while attempt < retries:
            try:
                log_to_file(log_file, f"üì° –ü—ã—Ç–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å batchGet (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}) –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {spreadsheet_id}")

                result = service.spreadsheets().values().batchGet(
                    spreadsheetId=spreadsheet_id,
                    ranges=ranges,
                    majorDimension="ROWS"
                ).execute()

                value_ranges = result.get("valueRanges", [])
                data = {vr.get("range", ""): vr.get("values", []) for vr in value_ranges}

                log_to_file(log_file, f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π batchGet. –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.")
                success = True
                break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

            except HttpError as e:
                status_code = e.resp.status
                log_to_file(log_file, f"‚ùå HttpError {status_code} –ø—Ä–∏ batchGet: {e}")

                if status_code in (429, 500, 503):
                    attempt += 1
                    log_to_file(log_file, f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay_seconds)
                elif status_code == 401:
                    log_to_file(log_file, "üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401). –ü—Ä–µ—Ä—ã–≤–∞—é batchGet.")
                    break
                else:
                    break

            except Exception as e:
                if any(x in str(e).lower() for x in ["ssl", "handshake", "decryption", "timed out"]):
                    attempt += 1
                    log_to_file(log_file, f"‚è≥ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ '{e}', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay_seconds)
                else:
                    log_to_file(log_file, f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ batchGet: {e}")
                    break

        # ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        insert_usage(
            token=self.token_name,
            count=attempt + 1,           # total –ø–æ–ø—ã—Ç–æ–∫, –≤–∫–ª—é—á–∞—è —Ñ–∏–Ω–∞–ª—å–Ω—É—é
            scan_group=scan_group,
            success=success
        )

        if success:
            return data
        else:
            log_to_file(log_file, "‚ùå batchGet –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–µ—É–¥–∞—á–Ω–æ.")
            return {}

#############################################################################################
# –§–∞–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#############################################################################################

    def process_phase(self):
        log_section("üõ†Ô∏è –§–∞–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", self.log_file)

        if not self.tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        for task in self.tasks:
            if task.scanned == 0:
                log_to_file(self.log_file, f"‚ö™ [Task {task.name_of_process}] –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            try:
                log_to_file(self.log_file, f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ [Task {task.name_of_process}]...")

                try:
                    task.process_raw_value() # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ values_json
                    
                    log_to_file(self.log_file, f"üì¶ [Task {task.name_of_process}] –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(task.values_json)} —Å—Ç—Ä–æ–∫.")
                    # for i, row in enumerate(task.values_json[:5]):
                    #     log_to_file(self.log_file, f"      [{i+1}] {row}")
                    # if len(task.values_json) > 5:
                    #     log_to_file(self.log_file, f"      ...–µ—â—ë {len(task.values_json) - 5} —Å—Ç—Ä–æ–∫ —Å–∫—Ä—ã—Ç–æ")
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå [Task {task.name_of_process}] –û—à–∏–±–∫–∞ –≤ process_raw_value: {e}")
                    continue

                try:
                    task.check_for_update()

                    if task.changed:
                        log_to_file(self.log_file, "üîÅ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Äî –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                        self.update_task_process_fields(task) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                        log_to_file(self.log_file, f"‚úÖ [Task {task.name_of_process}] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î.")
                    else:
                        log_to_file(self.log_file, "‚ö™ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå [Task {task.name_of_process}] –û—à–∏–±–∫–∞ –≤ check_for_update: {e}")
                    continue

            except Exception as e:
                log_to_file(self.log_file, f"‚ùå [Task {task.name_of_process}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def update_task_process_fields(self, task):
        cursor = self.conn.cursor()
        table = "RotationsInfo"
        cursor.execute(f"""
            UPDATE {table}
            SET
                hash = ?,
                values_json = ?
            WHERE id = ?
        """, (
            task.hash,
            json.dumps(task.values_json) if task.values_json else None,
            task.id
        ))
        log_to_file(self.log_file, f"üíæ –û–±–Ω–æ–≤–ª—ë–Ω values_json –∏ hash –¥–ª—è –∑–∞–¥–∞—á–∏ {task.name_of_process}")
        self.conn.commit()

#############################################################################################
# –§–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
#############################################################################################

    def update_phase(self):

        log_section("üîº –§–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.log_file)

        has_main_changes = any(task.changed for task in self.tasks if task.update_group == "update_main")
        has_shuffle_changes = any(task.changed for task in self.tasks if "shuffle" in task.update_group)

        main_tasks = [task for task in self.tasks if task.update_group == "update_main" and task.values_json and has_main_changes]
        shuffle_tasks = [task for task in self.tasks if "shuffle" in task.update_group and task.values_json and has_shuffle_changes]

        if main_tasks:
                try:
                    self.import_main_data(main_tasks)
                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ update_main: {e}")

        if shuffle_tasks:
            try:
                self.import_shuffle_data(shuffle_tasks)
            except Exception as e:
                log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ update_shuffle: {e}")
        if not main_tasks and not shuffle_tasks:
            log_to_file(self.log_file, "‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–ø—É—Å–∫.")
            return
        else:
            log_to_file(self.log_file, "üîº –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

##############################################################################################
# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Main
##############################################################################################

    def import_main_data(self, all_main_tasks):
        log_section("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è update_main", self.log_file)

        grouped_by_page = defaultdict(list)
        
        for task in all_main_tasks:
            grouped_by_page[task.target_page_name].append(task)

        for page_name, tasks in grouped_by_page.items():
            log_to_file(self.log_file, f"üìÑ –õ–∏—Å—Ç: {page_name} ({len(tasks)} –∑–∞–¥–∞—á)")

            ROTATION_ORDER = [
                "SHUFFLE Main", "VIP Main", "TURKISH Main", "GENERIC Main",
                "GSBJ Main", "LEGENDZ Main", "TRI-STAR Main", "TritonRL Main"
            ]

            task_map = {task.name_of_process: task for task in tasks}
            sorted_tasks = []
            all_values = []

            for name in ROTATION_ORDER:
                task = task_map.get(name)
                if not task:
                    log_to_file(self.log_file, f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    continue

                values = task.values_json
                if not values or not isinstance(values, list):
                    log_to_file(self.log_file, f"‚ö™ [Task {name}] –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø—É—Å–∫.")
                    task.update_after_upload(False)
                    self.update_task_update_fields(task)
                    continue

                flat = [str(cell).strip().upper() for row in values for cell in row if cell is not None]
                if flat == ["NULL"]:
                    log_to_file(self.log_file, f"‚ö™ [Task {name}] —Å–æ–¥–µ—Ä–∂–∏—Ç 'NULL'. –ü—Ä–æ–ø—É—Å–∫.")
                    task.update_after_upload(False)
                    self.update_task_update_fields(task)
                    continue

                log_to_file(self.log_file, f"üì¶ [Task {name}] ‚Äî {len(values)} —Å—Ç—Ä–æ–∫ (üîÑ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                sorted_tasks.append(task)
                all_values.extend(values)
                all_values.append([""] * 26)

            if not sorted_tasks:
                log_to_file(self.log_file, f"‚ö™ –ù–µ—Ç –∑–∞–¥–∞—á —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫ —Å–º–µ–Ω—ã {page_name}.")
                continue

            if all_values[-1] == [""] * 26:
                all_values.pop()

            if len(all_values) < 100:
                padding = 100 - len(all_values)
                all_values.extend([[""] * 26 for _ in range(padding)])
                log_to_file(self.log_file, f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã {padding} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ 100.")
            elif len(all_values) > 100:
                all_values = all_values[:100]
                log_to_file(self.log_file, "‚ö†Ô∏è –û–±—Ä–µ–∑–∞–Ω–æ –¥–æ 100 —Å—Ç—Ä–æ–∫.")

            reference_task = sorted_tasks[0]
            spreadsheet_id = reference_task.target_doc_id
            target_page_area = reference_task.target_page_area
            insert_range = f"{page_name}!{target_page_area}"

            log_to_file(self.log_file, f"üì§ –í—Å—Ç–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ {len(all_values)} —Å—Ç—Ä–æ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω {insert_range}.")
            batch_data = [{
                "range": insert_range,
                "values": all_values
            }]

            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            success, error = self.batch_update(self.service, spreadsheet_id, batch_data, reference_task.update_group, self.log_file)

            # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º API-–≤—ã–∑–æ–≤ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            insert_usage(
                token=self.token_name,
                count=1,
                scan_group=reference_task.update_group,
                success=success
            )

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                sheet_metadata = self.service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
                sheet_id = next(
                    (s["properties"]["sheetId"] for s in sheet_metadata["sheets"] if s["properties"]["title"] == page_name),
                    None
                )

                if sheet_id is None:
                    raise ValueError(f"Sheet '{page_name}' not found in spreadsheet")

                formatting_requests = build_formatting_requests(all_values, sheet_id)

                self.service.spreadsheets().batchUpdate(
                    spreadsheetId=spreadsheet_id,
                    body={"requests": formatting_requests}
                ).execute()

                log_to_file(self.log_file, f"üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(formatting_requests)} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ª–∏—Å—Ç–∞ '{page_name}'.")

                # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º API-–≤—ã–∑–æ–≤ —Ä–∞—Å–∫—Ä–∞—Å–∫–∏
                insert_usage(
                    token=self.token_name,
                    count=1,
                    scan_group=reference_task.update_group,
                    success=True
                )

            except Exception as e:
                log_to_file(self.log_file, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                insert_usage(
                    token=self.token_name,
                    count=1,
                    scan_group=reference_task.update_group,
                    success=False
                )

            for task in sorted_tasks:
                task.update_after_upload(success)
                self.update_task_update_fields(task)

            if success:
                log_to_file(self.log_file, f"‚úÖ –í—Å—Ç–∞–≤–∫–∞ —Å–º–µ–Ω—ã {page_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ({len(sorted_tasks)} –∑–∞–¥–∞—á).\n")
            else:
                log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–º–µ–Ω—ã {page_name}: {error}\n")

##############################################################################################
# –ò–º–ø–æ—Ä—Ç Shuffle –≤ —Ä–æ—Ç–∞—Ü–∏–∏
##############################################################################################
    
    def import_shuffle_data(self, tasks):
        log_section("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è update_shuffle", self.log_file)

        shuffle_groups = defaultdict(list)
        for task in tasks:
            shuffle_groups[task.update_group].append(task)

        for update_group, group_tasks in shuffle_groups.items():
            # üîÑ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á–∏ –ø–æ target_page_name (DAY 1, NIGHT 1 –∏ —Ç.–ø.)
            pages = defaultdict(list)
            for task in group_tasks:
                pages[task.target_page_name].append(task)

            for page_name, page_tasks in pages.items():
                reference_task = page_tasks[0]
                spreadsheet_id = page_tasks[0].target_doc_id

                log_to_file(self.log_file, f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {page_tasks[0].name_of_process}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_name}\n")

                try:
                    raw = self.batch_get(
                        self.service,
                        spreadsheet_id,
                        [f"{page_name}!D1:AC200"],
                        reference_task.update_group,
                        self.log_file
                    )
                    sheet_values = list(raw.values())[0] if raw else []

                    # üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å "shift:"
                    shift_row_index = None
                    for idx, row in enumerate(sheet_values):
                        if row and isinstance(row[0], str) and "shift:" in row[0].lower():
                            shift_row_index = idx + 1
                            break

                    if shift_row_index is None:
                        log_to_file(self.log_file, f"\n‚ùå –°—Ç—Ä–æ–∫–∞ —Å 'shift:' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_name}.")
                        for task in page_tasks:
                            task.update_after_upload(False)
                            self.update_task_update_fields(task)
                        continue

                    all_values = []
                    tasks_with_data = []

                    for task in page_tasks:
                        if not task.values_json or not isinstance(task.values_json, list):
                            log_to_file(self.log_file, f"‚ö™ [Task {task.name_of_process}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø—É—Å–∫.")
                            task.update_after_upload(False)
                            self.update_task_update_fields(task)
                            continue

                        log_to_file(self.log_file, f"üì¶ [Task {task.name_of_process}] ‚Äî {len(task.values_json)} —Å—Ç—Ä–æ–∫ (üîÑ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")

                        flat = [str(cell).strip().upper() for row in task.values_json for cell in row]
                        if flat == ["NULL"]:
                            log_to_file(self.log_file, f"‚ö™ [Task {task.name_of_process}] –°–æ–¥–µ—Ä–∂–∏—Ç 'NULL'. –ü—Ä–æ–ø—É—Å–∫.")
                            task.update_after_upload(False)
                            self.update_task_update_fields(task)
                            continue

                        all_values.extend(task.values_json)
                        tasks_with_data.append(task)

                    if not tasks_with_data:
                        log_to_file(self.log_file, f"‚ö™ –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_name}. –ü—Ä–æ–ø—É—Å–∫.")
                        continue

                    start_row = shift_row_index + 1
                    end_row = start_row + len(all_values) - 1
                    insert_range = f"{page_name}!D{start_row}:AC{end_row}"

                    log_to_file(self.log_file, f"\nüìç –°—Ç—Ä–æ–∫–∞ 'shift:' –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {shift_row_index + 1}, –≤—Å—Ç–∞–≤–∫–∞ –≤ {insert_range}")

                    batch_data = [{
                        "range": insert_range,
                        "values": all_values
                    }]

                    success, error = self.batch_update(
                        self.service,
                        spreadsheet_id,
                        batch_data,
                        update_group,
                        self.log_file
                    )

                    for task in page_tasks:
                        if task in tasks_with_data:
                            task.update_after_upload(success)
                            self.update_task_update_fields(task)

                    if success:
                        log_to_file(self.log_file, f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_name}.")
                    else:
                        log_to_file(self.log_file, f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_name}: {error}")

                    log_separator(self.log_file)

                except Exception as e:
                    log_to_file(self.log_file, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_name}: {e}")
                    for task in page_tasks:
                        task.update_after_upload(False)
                        self.update_task_update_fields(task)

                time.sleep(ROTATIONSINFO_INTERVAL)


###############################################################################################
# batchUpdate –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
###############################################################################################

    def batch_update(self, service, spreadsheet_id, batch_data, update_group, log_file, retries=3, delay_seconds=10):
        success = False
        attempt = 0

        while attempt < retries:
            try:
                log_to_file(log_file, f"üì§ –ü—ã—Ç–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å batchUpdate (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}) –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {spreadsheet_id}")

                service.spreadsheets().values().batchUpdate(
                    spreadsheetId=spreadsheet_id,
                    body={
                        "valueInputOption": "USER_ENTERED",
                        "data": batch_data
                    }
                ).execute()

                log_to_file(log_file, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π batchUpdate.")
                success = True
                break  # –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ

            except HttpError as e:
                status = e.resp.status
                log_to_file(log_file, f"‚ùå HTTP {status}: {e}")

                if status in [429, 500, 503]:
                    attempt += 1
                    log_to_file(log_file, f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫...")
                    time.sleep(delay_seconds)
                else:
                    break

            except Exception as e:
                log_to_file(log_file, f"‚ùå –û—à–∏–±–∫–∞: {e}")
                break

        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        insert_usage(
            token=self.token_name,
            count=attempt + 1,
            update_group=update_group,
            success=success
        )

        if success:
            return True, None
        else:
            return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫" if attempt == retries else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"

    def update_task_update_fields(self, task):
        cursor = self.conn.cursor()
        table = "RotationsInfo"
        cursor.execute(f"""
            UPDATE {table}
            SET
                last_update = ?,
                update_quantity = ?,
                update_failures = ?
            WHERE id = ?
        """, (
            task.last_update.isoformat() if task.last_update else None,
            task.update_quantity,
            task.update_failures,
            task.id
        ))
        self.conn.commit()